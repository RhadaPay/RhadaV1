{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "ApplicantApplied",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "ApplicantChosen",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					}
				],
				"name": "ApplicantSigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"name": "CreatorSigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "DownpaymentChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "FinalSign",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "JobCompleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "downPayment",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "incrementPay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timeBeforeStakeRemoved",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "JobCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "StakeRemoved",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "applyForJob",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "chosenApplicant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "chooseApplicant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newDownPayment",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "configureJobDownPayment",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_downPayment",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_incrementPay",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_timeBeforeStakeRemoved",
						"type": "uint256"
					}
				],
				"name": "createJob",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "finalSign",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "initApplicantSign",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "initCreatorSign",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "removeStake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "stakeEther",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "submitWork",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"applyForJob(uint256)": {
					"details": "Can flesh out a little bit more, but this is probably ok for now",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"chooseApplicant(address,uint256)": {
					"details": "Need to flesh out a little... Give applicant the choice to still choose the job before money is staked (do in signing process)For the above, make sure the states are worked out",
					"params": {
						"chosenApplicant": "The applicant who is accepted",
						"jobID": "The ID of a specific job*"
					}
				},
				"configureJobDownPayment(uint256,uint256)": {
					"details": "downpayment will be confirmed during the signing process",
					"params": {
						"jobID": "The ID of a specific job*",
						"newDownPayment": "The new down payment"
					}
				},
				"createJob(uint256,uint256,uint256)": {
					"details": "Some variables may be unneeded, such as the creator signing varlook into incrementPayLook into timeBeforeStakeRemoved",
					"params": {
						"_downPayment": "The initial downpayment that is staked by the job creator",
						"_incrementPay": "The initial increment per event (more on this... probably an oracle is the right way to go about this param. Could also standardize it)",
						"_timeBeforeStakeRemoved": "The time before the job creator can remove his stake after the job is submitted*"
					}
				},
				"finalSign(uint256)": {
					"details": "Refusals and states",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"initApplicantSign(uint256)": {
					"details": "Make sure states make sense. Add a function to withdraw",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"initCreatorSign(uint256)": {
					"details": "Check the states",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"removeStake(uint256)": {
					"details": "Need to discuss this idea more. Worker should be guaranteed some pay + extra as an investment",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"stakeEther(uint256)": {
					"details": "This function is most likely not logically written. Staking should be done inside the signing method*"
				},
				"submitWork(uint256)": {
					"details": "Check states. Probably need a bool for simple storage. Should emphasize       communicating with the job creator before submissionImplement states and refusals",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"applyForJob(uint256)": {
					"notice": "Applicants apply for a specific job"
				},
				"chooseApplicant(address,uint256)": {
					"notice": "The job creator can choose an applicant for his job"
				},
				"configureJobDownPayment(uint256,uint256)": {
					"notice": "The job creator can configure the down payment before finalizing his choice of applicant"
				},
				"createJob(uint256,uint256,uint256)": {
					"notice": "A new job is created with the terms set by the job creator"
				},
				"finalSign(uint256)": {
					"notice": "The job creators final sign off. Signals event tracking and the payment stream"
				},
				"initApplicantSign(uint256)": {
					"notice": "The applicant signs off and agrees to do a job. The applicant can still withdraw from the commitment before the creator also signs off"
				},
				"initCreatorSign(uint256)": {
					"notice": "The creator officially signs off and the job process starts"
				},
				"removeStake(uint256)": {
					"notice": "The job creator can remove his stake after the allotted time"
				},
				"stakeEther(uint256)": {
					"notice": "Ether is staked by the creator for the job."
				},
				"submitWork(uint256)": {
					"notice": "Signals that work is submitted. Acts as the applicant signing"
				}
			},
			"notice": "TO DO: Check states Check the logic behind withdrawing funds after certain amount of time Implement \"loan\" idea Implement the streampay Clean up code + comments Fix the stake ether function. Remove and put elsewhere Put more withdrawal functions in case Add a stake for the worker to make up for gas fees if bails on job? Does this act as more of a deterrent though? Begin testing*",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/Backend/Contracts/PaymentFactory.sol": "PaymentFactory"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c",
			"license": "MIT",
			"urls": [
				"bzz-raw://d8eeaf6afe00229af4c232ca058bb08b7a24cc3886f0b387159ac49ffd8b5312",
				"dweb:/ipfs/QmdnVKmDDWDvdRr6vtrxy3G6WafqA2TAhUZv1UFMsm4B4r"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e7820bcf567e6892d937c3cb10db263a4042e446799bca602535868d822384e",
				"dweb:/ipfs/QmPG2oeDjKncqsEeyYGjAN7CwAJmMgHterXGGnpzhha4z7"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e604bcdcd5e5b2fb299ad09769cde6db19d5aa1929d1b5e939234a0f10d7eb8",
				"dweb:/ipfs/Qmd8hXE3GZfBHuWx3RNiYgFW2ci7KvHtib8DiwzJ2dgo9V"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5",
			"license": "MIT",
			"urls": [
				"bzz-raw://af63ab940a34687c45f0ad84960b048fc5f49330c92ccb422db7822a444733b9",
				"dweb:/ipfs/QmUShaQEu8HS1GjDnsMJQ8jkZEBrecn6NuDZ3pfjY1gVck"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol": {
			"keccak256": "0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a05eec7083dfa0cc7e0cbfe6cd1bd085a340af1ede93fdff3ad047c5fb3d8e",
				"dweb:/ipfs/QmVApz5fCUq2QC8gKTsNNdCmcedJ3ETHp68zR5N3WUKS4r"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c",
				"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Strings.sol": {
			"keccak256": "0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e",
				"dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d10e1d9b26042424789246603906ad06143bf9a928f4e99de8b5e3bdc662f549",
				"dweb:/ipfs/Qmejonoaj5MLekPus229rJQHcC6E9dz2xorjHJR84fMfmn"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4",
			"license": "MIT",
			"urls": [
				"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6",
				"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx"
			]
		},
		"src/Backend/Contracts/PaymentFactory.sol": {
			"keccak256": "0xc00e28874b1a371dfa84d4307298faebb257bd4e05566e9cdfb05eb9824347f2",
			"license": "MIT",
			"urls": [
				"bzz-raw://f44a862005b4403c9a702b0183c887c26c3c3290c4c9f51a13609a6424f9bed7",
				"dweb:/ipfs/QmaL6GPVAY8eZeUieNS1L2Nbxk7SAg3zJ5qTQk3ia6rzHp"
			]
		}
	},
	"version": 1
}