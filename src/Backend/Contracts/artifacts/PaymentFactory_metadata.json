{
	"compiler": {
		"version": "0.7.1+commit.f4a555be"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "ApplicantApplied",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "ApplicantChosen",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "ApplicantSigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "CreatorSigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "DownpaymentChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "law",
						"type": "bool"
					}
				],
				"name": "FinalResult",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "applicant",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "FinalSign",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "JobCompleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "initAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "JobCreated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "applyForJob",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "chosenApplicant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "chooseApplicant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "configureAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_initAmount",
						"type": "uint256"
					}
				],
				"name": "createJob",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "finalApplicant",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "law",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "finalSign",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "initApplicantSign",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "initCreatorSign",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "jobToApplicants",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "jobs",
				"outputs": [
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "enum PaymentFactory.State",
						"name": "state",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "creatorSigned",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "applicantSigned",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "workSubmitted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "jobID",
						"type": "uint256"
					}
				],
				"name": "submitWork",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"applyForJob(uint256)": {
					"details": "Can flesh out a little bit more, but this is probably ok for now",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"chooseApplicant(address,uint256)": {
					"details": "Need to flesh out a little... Give applicant the choice to still choose the job before money is staked (do in signing process)For the above, make sure the states are worked out",
					"params": {
						"chosenApplicant": "The applicant who is accepted",
						"jobID": "The ID of a specific job*"
					}
				},
				"createJob(uint256)": {
					"details": "Look into mediation and whether or not names/descs should be held in the backend",
					"params": {
						"_initAmount": "The initial amount that is staked by the job creator*"
					}
				},
				"finalSign(bool,uint256)": {
					"details": "Include ability to refuse? Who would pay gas to refuse? Just don't pay...In response to above comment: could be where mediation comes in. Mediator checks work, then decides who receives stake?Would need to emphasize a high initAmount in that case",
					"params": {
						"jobID": "The ID of a specific job*",
						"law": "Dictates whether the work is accepted or rejected. True to accept, false to reject"
					}
				},
				"initApplicantSign(uint256)": {
					"details": "Add init stake to prevent bailing? May be a deterrent...",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"initCreatorSign(uint256)": {
					"details": "Check the states",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				},
				"submitWork(uint256)": {
					"details": "Check states. Probably need a bool for simple storage. Should emphasize       communicating with the job creator before submissionImplement states and refusals",
					"params": {
						"jobID": "The ID of a specific job*"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"applyForJob(uint256)": {
					"notice": "Applicants apply for a specific job"
				},
				"chooseApplicant(address,uint256)": {
					"notice": "The job creator can choose an applicant for his job"
				},
				"configureAmount(uint256,uint256)": {
					"notice": "notice The job creator can configure the down payment before finalizing his choice of applicant dev downpayment will be confirmed during the signing process param newAmount The new down payment param jobID The ID of a specific job*"
				},
				"createJob(uint256)": {
					"notice": "A new job is created with the terms set by the job creator"
				},
				"finalSign(bool,uint256)": {
					"notice": "The job creators final sign off. Signals event tracking and the payment stream"
				},
				"initApplicantSign(uint256)": {
					"notice": "The applicant signs off and agrees to do a job. The applicant can still withdraw from the commitment before the creator also signs off"
				},
				"initCreatorSign(uint256)": {
					"notice": "The creator officially signs off and the job process starts"
				},
				"submitWork(uint256)": {
					"notice": "Signals that work is submitted. Acts as the applicant signing"
				}
			},
			"notice": "TO DO: Check states Withdrawing funds Mediation Implement loan idea. Also flesh out and discuss it more. Implement a function where creator can only increase his holdings              Hard to do w/o someone (the seller) being punished Implement the streampay Clean up code + comments Add a stake for the worker to make up for gas fees if bails on job? Does this act as more of a deterrent though? Begin testing Add require statements + messages w/ require statements*",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/Backend/contracts/PaymentFactory.sol": "PaymentFactory"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"src/Backend/contracts/PaymentFactory.sol": {
			"keccak256": "0x69498daa6dd1d440e6e495ce5af28d6e8fbaf4113905e44cbdfeff3a27f02da8",
			"license": "MIT",
			"urls": [
				"bzz-raw://697e92b8c50bf46cfc886b98a92ac110ca9fcb77a27d308b94d9b2773d615afa",
				"dweb:/ipfs/Qmbd3MXJiYpa8wJNnJAZGaJA8syH6mzFePvBirFPiNT8zc"
			]
		}
	},
	"version": 1
}