{
  "address": "0xf50d2d9dBAEa42212473740A25b8a2f502Ec6593",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "host",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cfa",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acceptedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NewCashFlow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JOB_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cashflowsRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cashflowsSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "internalType": "int96",
          "name": "allowedFlow",
          "type": "int96"
        },
        {
          "internalType": "int96",
          "name": "maxAllowedFlow",
          "type": "int96"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "createNewCashflow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAcceptedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "getAllowedFlow",
      "outputs": [
        {
          "internalType": "int96",
          "name": "",
          "type": "int96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "internalType": "int96",
          "name": "newAllowance",
          "type": "int96"
        }
      ],
      "name": "updateCashflowAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentFactory",
          "type": "address"
        }
      ],
      "name": "updatePaymentFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfce03cf5ea9ce2d5a51d4bc1638e89859bc428ac84433e62770e58349d4cc0b5",
  "receipt": {
    "to": null,
    "from": "0xAb9941a4f6c9Ddea1ee14db777c03b94BC60Da6f",
    "contractAddress": "0xf50d2d9dBAEa42212473740A25b8a2f502Ec6593",
    "transactionIndex": 0,
    "gasUsed": "5429407",
    "logsBloom": "0x0000000c
    "blockHash": "0xceb6f3d451deccc776aaf12d7f1c68af14fc18e9050c10e34c1b5f56d14e09c7",
    "transactionHash": "0xfce03cf5ea9ce2d5a51d4bc1638e89859bc428ac84433e62770e58349d4cc0b5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17496084,
        "transactionHash": "0xfce03cf5ea9ce2d5a51d4bc1638e89859bc428ac84433e62770e58349d4cc0b5",
        "address": "0xf50d2d9dBAEa42212473740A25b8a2f502Ec6593",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ab9941a4f6c9ddea1ee14db777c03b94bc60da6f",
          "0x000000000000000000000000ab9941a4f6c9ddea1ee14db777c03b94bc60da6f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xceb6f3d451deccc776aaf12d7f1c68af14fc18e9050c10e34c1b5f56d14e09c7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17496084,
        "transactionHash": "0xfce03cf5ea9ce2d5a51d4bc1638e89859bc428ac84433e62770e58349d4cc0b5",
        "address": "0xf50d2d9dBAEa42212473740A25b8a2f502Ec6593",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2146fb0650aa23d903841a16cbfadac001411640a1961091ac4ff13f0f16bcce",
          "0x000000000000000000000000ab9941a4f6c9ddea1ee14db777c03b94bc60da6f",
          "0x000000000000000000000000ab9941a4f6c9ddea1ee14db777c03b94bc60da6f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xceb6f3d451deccc776aaf12d7f1c68af14fc18e9050c10e34c1b5f56d14e09c7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17496084,
        "transactionHash": "0xfce03cf5ea9ce2d5a51d4bc1638e89859bc428ac84433e62770e58349d4cc0b5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ab9941a4f6c9ddea1ee14db777c03b94bc60da6f",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000242ac81cb47d400000000000000000000000000000000000000000000000000032200da51f7a20000000000000000000000000000000000000000000000011106530a5fceb4260c00000000000000000000000000000000000000000000000000df545886afce000000000000000000000000000000000000000000000001110895b6e199fbfa0c",
        "logIndex": 2,
        "blockHash": "0xceb6f3d451deccc776aaf12d7f1c68af14fc18e9050c10e34c1b5f56d14e09c7"
      }
    ],
    "blockNumber": 17496084,
    "cumulativeGasUsed": "5429407",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEB796bdb90fFA0f28255275e16936D25d3418603",
    "0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873",
    "0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f",
    "0x5f2261CB0f3e12eb7bF08828974090aBD107b523"
  ],
  "solcInputHash": "0cdc67a3e186c028775b4306a675a790",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cfa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NewCashFlow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JOB_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cashflowsRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cashflowsSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"allowedFlow\",\"type\":\"int96\"},{\"internalType\":\"int96\",\"name\":\"maxAllowedFlow\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"createNewCashflow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAcceptedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"getAllowedFlow\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"newAllowance\",\"type\":\"int96\"}],\"name\":\"updateCashflowAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentFactory\",\"type\":\"address\"}],\"name\":\"updatePaymentFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol\":\"TradeableCashflowWithAllowanceFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x7af5c445c8ec15943c526351329c58f15e2b4ab6e6c1c111efad299b94281c1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe81b5fca616ec6f57bb9d1ab0750202b9e514760462274ac04495e8c249697ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\",\"license\":\"MIT\"},\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperApp,\\n    SuperAppDefinitions\\n} from \\\"../interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nabstract contract SuperAppBase is ISuperApp {\\n\\n    function beforeAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement Created\\\");\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Created\\\");\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement updated\\\");\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Updated\\\");\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback -  Before Agreement Terminated\\\");\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Terminated\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x76db1497b95aa8af5c6b6d64222c5894c6f5e5662844b7287f0134cbbd0bb5c5\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's constant flow agreement interface\\n *\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @dev Get the maximum flow rate allowed with the deposit\\n     * @param deposit Deposit amount used for creating the flow\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Get the deposit required for creating the flow\\n     * @param flowRate Flow rate to be tested\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Create a flow betwen sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents.\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @dev Update the flow rate between sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate.\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system.\\n     * - Deposit amount will be adjusted accordingly.\\n     * - No new gas fee is charged.\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver`.\\n     * @param token Super token address.\\n     * @param sender Flow receiver.\\n     * @param receiver Flow sender.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get flow data using agreement ID\\n     * @param token Super token address.\\n     * @param agreementId The agreement ID.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address.\\n    * @param account Account for the query.\\n    */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address.\\n     * @param account Account for the query.\\n     * @return flowRate Flow rate.\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Delete the flow between sender and receiver\\n     * @param token Super token address.\\n     * @param ctx Context bytes.\\n     * @param receiver Flow receiver address.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow.\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement.\\n     * - Gas fee may be returned to the sender.\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event.\\n      * @param token Super token address.\\n      * @param sender Flow sender address.\\n      * @param receiver Flow recipient address.\\n      * @param flowRate Flow rate in amount per second for this flow.\\n      * @param flowRate Total flow rate in amount per second for the sender.\\n      * @param flowRate Total flow rate in amount per second for the receiver.\\n      * @param userData The user provided data.\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0xc47783262893c4600d412987ea47558b3b79336407462e6dff2117c04304177f\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\n/**\\n * @dev Super app definitions library\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n}\\n\\n/**\\n * @dev Context definitions library\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @dev Batch operation library\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev Superfluid.callAgreement batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev Superfluid.callAppAction batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n\\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\\\");\\n\\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.trustedForwarder\\\",\\n            forwarder));\\n    }\\n\\n    function getAppWhiteListingSecretKey(address deployer, string memory registrationkey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.seed\\\",\\n            deployer,\\n            registrationkey));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x81b19f6e00ad3aabb670f75ae7fb4fac8b7e03fb70cc94a81b9c43ce6e2fea96\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Superfluid's agreement interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Initialize the agreement contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the type of the agreement class.\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class.\\n     * @param account Account the state belongs to\\n     * @param time Future time used for the calculation.\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\\n     * @return deposit Account deposit amount of this agreement.\\n     * @return owedDeposit Account owed deposit amount of this agreement.\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xcf8a33fadd5db47562156a11098623246efd1b46a2c3d28269767bcbb324fd66\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's app interface.\\n *\\n * NOTE:\\n * - Be fearful of the app jail, when the word permitted is used.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0xca93702505ec3c8244227e372687d9bdbc9d368fa07723d310ab9550501abb2a\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /// @dev Initialize the contract\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account where tokens are upgraded to\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0xba355f7d7d5d32ca345bcdb355759ba598a911ff07227ff80012a5e0bf660fb1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n    event CustomSuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x7dc514c6c9eda681ed8ad66ccfb68dc22764b6c429ab55fddbba28b6b148621b\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n// This is required by the batchCall and decodeCtx\\npragma experimental ABIEncoderV2;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid host interface.\\n\\n * It is the central contract of the system where super agreement, super app\\n * and super token features are connected together.\\n *\\n * The superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governace of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    event AgreementClassRegistered(bytes32 agreementType, address code);\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic INitial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    event AgreementClassUpdated(bytes32 agreementType, address code);\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @dev Get agreement class\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @dev Create a new bitmask by adding a agreement class to it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @dev Create a new bitmask by removing a agreement class from it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n\\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\\n    /**\\n     * @dev Update the super token logic to the latest\\n     *\\n     * NOTE:\\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev App registered event\\n     */\\n    event AppRegistered(ISuperApp indexed app);\\n\\n    /**\\n     * @dev Jail event for the app\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n\\n    /**\\n     * @dev Message sender declares it as a super app, using a registration key\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * @param registrationKey The registration key issued by the governance\\n     */\\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev White-list the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The taget super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app  is allowed to call the target app as downstream app.\\n     * @param app Super app address\\n     * @param targetApp The taget super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed,\\n        ISuperfluidToken appAllowanceToken\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 appAllowanceWantedMore,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @dev Call app action\\n     * @param callData The contextual call data.\\n     *\\n     * NOTE: See callAgreement about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev ABIv2 Encoded memory data of context\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestsamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n        // app address\\n        address appAddress;\\n        // app allowance in super token\\n        ISuperfluidToken appAllowanceToken;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations.\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function for trusted forwarders (EIP-2771)\\n     * @param operations Array of batch operations.\\n     */\\n    function forwardBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage don't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0x130e01e2fdb535e4a512afd4a62c618d1bc162d3ba17ebaa71ece8b1679ffbc7\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's Governance interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function updateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken token) external;\\n\\n    /// @dev Get configuration as address value\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /// @dev Get configuration as uint256 value\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x1494ca0fcbe19dac4d2cf599dacd1053c1405d96965761f4bbae9fc4f39e88ac\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's token interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @dev Check if one account is critical\\n    * @param account Account check if is critical by a future time\\n    * @param timestamp Time of balance\\n    * @return isCritical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @dev Check if one account is critical now\\n    * @param account Account check if is critical by a future time\\n    * @return isCritical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @dev Check if one account is solvent\\n     * @param account Account check if is solvent by a future time\\n     * @param timestamp Time of balance\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @dev Check if one account is solvent now\\n     * @param account Account check if is solvent now\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @dev Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement termination event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of a agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account of the agrement\\n     * @param state Agreement state of the account\\n     */\\n    event AgreementAccountStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        bytes state\\n    );\\n\\n    /**\\n     * @dev Settle balance from an account by the agreement.\\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred (DEPRECATIED BY AgreementLiquidatedBy)\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Agreement liquidation event (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param bondAccount Account that collect the reward or bailout accounts\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of liquidation bailouot\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if bailout is equal to 0, then\\n     *   - the bondAccount will get the rewardAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount.\\n     * - if bailout is larger than 0, then\\n     *   - the liquidatorAccount will get the rewardAmouont,\\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\\n     */\\n    event AgreementLiquidatedBy(\\n        address liquidatorAccount,\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed bondAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts\\n     * @param id Agreement ID\\n     * @param liquidator Address of the executer of liquidation\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of account bailout needed\\n     *\\n     * NOTE:\\n     * Liquidation rules:\\n     *  - If a bailout is required (bailoutAmount > 0)\\n     *     - the actual reward goes to the liquidator,\\n     *     - while the reward account becomes the bailout account\\n     *     - total bailout include: bailout amount + reward amount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayouts\\n    (\\n        bytes32 id,\\n        address liquidator,\\n        address penaltyAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    )\\n        external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n}\\n\",\"keccak256\":\"0xc658bc41894eecb8f64de68b92011c66b9ae2ec4d0373321c3f558a527f8ecc4\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n\\n/**\\n *\\n * @dev Interface for ERC20 token with token info\\n *\\n * NOTE: Using abstract contract instead of interfaces because old solidity\\n * does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x808d3a486826e7f119671174a77896c6e23578e691625350dbb3e9f74a0d5137\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\n/**\\n * @dev ERC20 token info interface\\n *\\n * NOTE: ERC20 standard interface does not specify these functions, but\\n * often the token implementations have them.\\n *\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4dee21b8f64edbfe811a300d31f529b5367d1186d69b8b2b8dc3373be7a108b0\",\"license\":\"AGPLv3\"},\"Contracts/Cashflow/Interfaces/ITradeableCashflowWithAllowanceFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\ninterface ITradeableCashflowWithAllowanceFactory {\\n    function createNewCashflow(\\n        address recipient,\\n        address sender,\\n        uint256 jobId,\\n        int96 allowedFlow,\\n        int96 maxAllowedFlow,\\n        uint256 deadline\\n    ) external returns(address);\\n\\n    function updateCashflowAllowance(uint256 jobId, int96 newAllowance) external;\\n\\n    function getAllowedFlow(uint256 jobId) external view returns(int96);\\n\\n    //JobId is not needed for now but it could allow in future to have different super token options for differents job\\n    function getAcceptedToken(uint256 jobId) external view returns(address);\\n\\n}\\n\",\"keccak256\":\"0x1125e12a4c6a694675899754d1e59f08fb1cbe10743cb2526af48cde7ab666c6\",\"license\":\"MIT\"},\"Contracts/Cashflow/RedirectAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport {ISuperfluid, ISuperToken, ISuperApp, ISuperAgreement, SuperAppDefinitions} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\"; //\\\"@superfluid-finance/ethereum-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nimport {IConstantFlowAgreementV1} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\n\\nimport {SuperAppBase} from \\\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\\\";\\n\\ncontract RedirectAll is SuperAppBase {\\n    ISuperfluid private _host; // host\\n    IConstantFlowAgreementV1 private _cfa; // the stored constant flow agreement class address\\n    ISuperToken private _acceptedToken; // accepted token\\n\\n    address public _receiver;\\n    address public _sender;\\n    int96 public _allowedFlow;\\n    int96 public _maxAllowedFlow;\\n    uint256 public _deadline;\\n\\n    event ReceiverChanged(address receiver);\\n    event FlowUpdated(int96 inFlow, int96 outflow, int96 refundFlow);\\n    event NewAgreement(address sender, address receiver);\\n\\n    constructor(\\n        ISuperfluid host,\\n        IConstantFlowAgreementV1 cfa,\\n        ISuperToken acceptedToken,\\n        address receiver,\\n        int96 allowedFlow,\\n        int96 maxAllowedFlow,\\n        uint256 deadline,\\n        address sender\\n    ) {\\n        require(address(host) != address(0), \\\"host is zero address\\\");\\n        require(address(cfa) != address(0), \\\"cfa is zero address\\\");\\n        require(\\n            address(acceptedToken) != address(0),\\n            \\\"acceptedToken is zero address\\\"\\n        );\\n        require(address(receiver) != address(0), \\\"receiver is zero address\\\");\\n        require(!host.isApp(ISuperApp(receiver)), \\\"receiver is an app\\\");\\n        require(allowedFlow <= maxAllowedFlow, \\\"_maxAllowedFlow overflow\\\" );\\n\\n\\n        _host = host;\\n        _cfa = cfa;\\n        _acceptedToken = acceptedToken;\\n        _receiver = receiver;\\n        _sender = sender;\\n        _allowedFlow = allowedFlow;\\n        _maxAllowedFlow = maxAllowedFlow;\\n        _deadline = deadline;\\n\\n        uint256 configWord = SuperAppDefinitions.APP_LEVEL_FINAL |\\n            SuperAppDefinitions.BEFORE_AGREEMENT_CREATED_NOOP |\\n            SuperAppDefinitions.BEFORE_AGREEMENT_UPDATED_NOOP |\\n            SuperAppDefinitions.BEFORE_AGREEMENT_TERMINATED_NOOP;\\n\\n        _host.registerApp(configWord);\\n    }\\n\\n    function _closeCashflow() private{\\n        (, int96 inFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            _sender,\\n            address(this)\\n        );\\n        (, int96 outFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _receiver\\n        );\\n        (, int96 refundFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _sender\\n        );\\n\\n        int96 newRefundFlow = inFlowRate;\\n\\n        //delete existing flows\\n        if (outFlowRate != 0) {\\n            deleteFlow(_receiver);\\n        }\\n\\n        if (refundFlowRate != 0) {\\n            deleteFlow(_sender);\\n        }\\n\\n        // Create flow to refund everything to the sender\\n        if (inFlowRate > 0) {\\n            if (newRefundFlow > 0) {\\n                createFlow(_sender, newRefundFlow);\\n            }\\n        }\\n\\n\\n    }\\n\\n    //Should have a restricted access (onlyFactory?)\\n    function updateAllowedFlow(int96 newValue) public {\\n        if (newValue == _allowedFlow) return;\\n        require(newValue <= _maxAllowedFlow, \\\"_maxAllowedFlow overflow\\\" );\\n\\n        if(block.timestamp > _deadline){\\n            _closeCashflow();\\n        }\\n\\n        _allowedFlow = newValue;\\n\\n        (, int96 inFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            _sender,\\n            address(this)\\n        );\\n        (, int96 outFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _receiver\\n        );\\n        (, int96 refundFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _sender\\n        );\\n\\n        int96 newRefundFlow = 0;\\n        int96 newOutFlow = inFlowRate;\\n\\n        //delete existing flows\\n        if (outFlowRate != 0) {\\n            deleteFlow(_receiver);\\n        }\\n\\n        if (refundFlowRate != 0) {\\n            deleteFlow(_sender);\\n        }\\n\\n        // Create flow\\n        if (inFlowRate > 0) {\\n            if (inFlowRate > _allowedFlow) {\\n                newRefundFlow = inFlowRate - _allowedFlow;\\n                newOutFlow -= newRefundFlow;\\n            }\\n\\n            if (newOutFlow > 0) {\\n                createFlow(_receiver, newOutFlow);\\n            }\\n\\n            if (newRefundFlow > 0) {\\n                createFlow(_sender, newRefundFlow);\\n            }\\n        }\\n        emit FlowUpdated(inFlowRate, newOutFlow, newRefundFlow);\\n    }\\n\\n    /**************************************************************************\\n     * Redirect Logic\\n     *************************************************************************/\\n\\n    function currentReceiver()\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            address receiver,\\n            int96 flowRate\\n        )\\n    {\\n        if (_receiver != address(0)) {\\n            (startTime, flowRate, , ) = _cfa.getFlow(\\n                _acceptedToken,\\n                address(this),\\n                _receiver\\n            );\\n            receiver = _receiver;\\n        }\\n    }\\n\\n    /**************************************************************************\\n     * Utiliy methods for Superfluid\\n     *************************************************************************/\\n    function deleteFlowWithCtx(address recipient, bytes memory ctx)\\n        internal\\n        returns (bytes memory newCtx)\\n    {\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.deleteFlow.selector,\\n                _acceptedToken,\\n                address(this),\\n                recipient,\\n                new bytes(0) // placeholder\\n            ),\\n            \\\"0x\\\",\\n            ctx\\n        );\\n    }\\n\\n    function deleteFlow(address recipient) internal {\\n        _host.callAgreement(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.deleteFlow.selector,\\n                _acceptedToken,\\n                address(this),\\n                recipient,\\n                new bytes(0) // placeholder\\n            ),\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function updateFlowWithCtx(\\n        address recipient,\\n        int96 amount,\\n        bytes memory ctx\\n    ) internal returns (bytes memory newCtx) {\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.updateFlow.selector,\\n                _acceptedToken,\\n                recipient,\\n                amount,\\n                new bytes(0) // placeholder\\n            ),\\n            \\\"0x\\\",\\n            ctx\\n        );\\n    }\\n\\n    function updateFlow(address recipient, int96 amount) internal {\\n        _host.callAgreement(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.updateFlow.selector,\\n                _acceptedToken,\\n                recipient,\\n                amount,\\n                new bytes(0) // placeholder\\n            ),\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function createFlowWithCtx(\\n        address recipient,\\n        int96 amount,\\n        bytes memory ctx\\n    ) internal returns (bytes memory newCtx) {\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.createFlow.selector,\\n                _acceptedToken,\\n                recipient,\\n                amount,\\n                new bytes(0) // placeholder\\n            ),\\n            \\\"0x\\\",\\n            ctx\\n        );\\n    }\\n\\n    function createFlow(address recipient, int96 amount) internal {\\n        _host.callAgreement(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.createFlow.selector,\\n                _acceptedToken,\\n                recipient,\\n                amount,\\n                new bytes(0) // placeholder\\n            ),\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    /// @dev If a new stream is opened, or an existing one is opened\\n    /// Redirects only _sender streams\\n    function _updateOutflow(bytes calldata ctx)\\n        private\\n        returns (bytes memory newCtx)\\n    {\\n        newCtx = ctx;\\n\\n        (, int96 inFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            _sender,\\n            address(this)\\n        );\\n\\n        (, int96 outFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _receiver\\n        );\\n\\n        (, int96 refundFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _sender\\n        );\\n\\n        int96 newRefundFlow = 0;\\n        int96 newOutFlow = inFlowRate;\\n\\n        //delete existing flows\\n        if (outFlowRate != 0) {\\n            newCtx = deleteFlowWithCtx(_receiver, newCtx);\\n        }\\n\\n        if (refundFlowRate != 0) {\\n            newCtx = deleteFlowWithCtx(_sender, newCtx);\\n        }\\n\\n        // Create flow\\n        if (inFlowRate > 0) {\\n            if (inFlowRate > _allowedFlow) {\\n                newRefundFlow = inFlowRate - _allowedFlow;\\n                newOutFlow -= newRefundFlow;\\n            }\\n\\n            if (newOutFlow > 0) {\\n                newCtx = createFlowWithCtx(_receiver, newOutFlow, newCtx);\\n            }\\n\\n            if (newRefundFlow > 0) {\\n                newCtx = createFlowWithCtx(_sender, newRefundFlow, newCtx);\\n            }\\n        }\\n\\n        emit FlowUpdated(inFlowRate, newOutFlow, newRefundFlow);\\n    }\\n\\n    // @dev Change the Receiver of the total flow\\n    function _changeReceiver(address newReceiver) internal {\\n        require(newReceiver != address(0), \\\"New receiver is zero address\\\");\\n        // @dev because our app is registered as final, we can't take downstream apps\\n        require(\\n            !_host.isApp(ISuperApp(newReceiver)),\\n            \\\"New receiver can not be a superApp\\\"\\n        );\\n        if (newReceiver == _receiver) return;\\n        (, int96 outFlowRate, , ) = _cfa.getFlow(\\n            _acceptedToken,\\n            address(this),\\n            _receiver\\n        );\\n\\n        if (outFlowRate > 0) {\\n            // @dev delete flow to old receiver\\n            deleteFlow(_receiver);\\n\\n            // @dev create flow to new receiver\\n            createFlow(newReceiver, outFlowRate);\\n        }\\n\\n        // @dev set global receiver to new receiver\\n        _receiver = newReceiver;\\n\\n        emit ReceiverChanged(_receiver);\\n    }\\n\\n    /**************************************************************************\\n     * SuperApp callbacks\\n     *************************************************************************/\\n\\n    function afterAgreementCreated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, // _agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata, // _cbdata,\\n        bytes calldata _ctx\\n    )\\n        external\\n        override\\n        onlyExpected(_superToken, _agreementClass)\\n        onlyHost\\n        returns (bytes memory newCtx)\\n    {\\n        //Only consider flows from the sender\\n        (address flowSender, address flowReceiver) = abi.decode(\\n            agreementData,\\n            (address, address)\\n        );\\n        emit NewAgreement(flowSender, flowReceiver);\\n\\n        if (flowSender == _sender) {\\n            return _updateOutflow(_ctx);\\n        } else {\\n            return _ctx;\\n        }\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, //_agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata, //_cbdata,\\n        bytes calldata _ctx\\n    )\\n        external\\n        override\\n        onlyExpected(_superToken, _agreementClass)\\n        onlyHost\\n        returns (bytes memory newCtx)\\n    {\\n        //Only consider flows from the sender\\n        (address flowSender, address flowReceiver) = abi.decode(\\n            agreementData,\\n            (address, address)\\n        );\\n        emit NewAgreement(flowSender, flowReceiver);\\n\\n        if (flowSender == _sender) {\\n            return _updateOutflow(_ctx);\\n        } else {\\n            return _ctx;\\n        }\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken _superToken,\\n        address _agreementClass,\\n        bytes32, //_agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata, //_cbdata,\\n        bytes calldata _ctx\\n    ) external override onlyHost returns (bytes memory newCtx) {\\n        //TODO: handle contract termination\\n        // According to the app basic law, we should never revert in a termination callback\\n        if (!_isSameToken(_superToken) || !_isCFAv1(_agreementClass))\\n            return _ctx;\\n        //Only consider flows from the sender\\n        (address flowSender, address flowReceiver) = abi.decode(\\n            agreementData,\\n            (address, address)\\n        );\\n        emit NewAgreement(flowSender, flowReceiver);\\n\\n        if (flowSender == _sender) {\\n            return _updateOutflow(_ctx);\\n        } else {\\n            return _ctx;\\n        }\\n    }\\n\\n    function _isSameToken(ISuperToken superToken) private view returns (bool) {\\n        return address(superToken) == address(_acceptedToken);\\n    }\\n\\n    function _isCFAv1(address agreementClass) private view returns (bool) {\\n        return\\n            ISuperAgreement(agreementClass).agreementType() ==\\n            keccak256(\\n                \\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\"\\n            );\\n    }\\n\\n    modifier onlyHost() {\\n        require(\\n            msg.sender == address(_host),\\n            \\\"RedirectAll: support only one host\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExpected(ISuperToken superToken, address agreementClass) {\\n        require(_isSameToken(superToken), \\\"RedirectAll: not accepted token\\\");\\n        require(_isCFAv1(agreementClass), \\\"RedirectAll: only CFAv1 supported\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x91bc53b1e7537c69ee307f0c6abe0c3f6394b99569c9f7008d4e171a45769847\",\"license\":\"MIT\"},\"Contracts/Cashflow/TradeableCashflowWithAllowance.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport {RedirectAll, ISuperToken, IConstantFlowAgreementV1, ISuperfluid} from \\\"./RedirectAll.sol\\\";\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract TradeableCashflowWithAllowance is ERC721, RedirectAll {\\n    constructor(\\n        address owner,\\n        int96 allowedFlow,\\n        int96 maxAllowedFlow,\\n        uint256 deadline,\\n        address sender,\\n        address host,\\n        address cfa,\\n        address acceptedToken\\n    )\\n        ERC721(\\\"JobCashflow\\\", \\\"JobCashflow\\\")\\n        RedirectAll(\\n            ISuperfluid(host),\\n            IConstantFlowAgreementV1(cfa),\\n            ISuperToken(acceptedToken),\\n            owner,\\n            allowedFlow,\\n            maxAllowedFlow,\\n            deadline,\\n            sender\\n        )\\n    {\\n        _mint(owner, 1);\\n    }\\n\\n    //now I will insert a nice little hook in the _transfer, including the RedirectAll function I need\\n    function _beforeTokenTransfer(\\n        address, /*from*/\\n        address to,\\n        uint256 /*tokenId*/\\n    ) internal override {\\n        _changeReceiver(to);\\n    }\\n}\\n\",\"keccak256\":\"0xa8438d1df30c7140afcca329b10d2965793a78a4f17b45ab55a21c1ccd5ffdca\",\"license\":\"MIT\"},\"Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport \\\"./TradeableCashflowWithAllowance.sol\\\";\\nimport \\\"./Interfaces/ITradeableCashflowWithAllowanceFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n//import {ISuperToken, IConstantFlowAgreementV1, ISuperfluid} from \\\"./RedirectAll.sol\\\";\\n\\ncontract TradeableCashflowWithAllowanceFactory is ITradeableCashflowWithAllowanceFactory, AccessControl{\\n    address private _host; // host\\n    address private _cfa; // the stored constant flow agreement class address\\n    address private _acceptedToken; // accepted token\\n    address private _paymentFactory;\\n\\n    bytes32 public constant JOB_ADMIN = keccak256(\\\"JOB_ADMIN\\\");\\n\\n    event NewCashFlow(uint jobId,  address recipient, address sender);\\n    mapping(uint => address) public cashflowsRecipient;  \\n    mapping(uint => address) public cashflowsSender;  \\n\\n    constructor(\\n        address host,\\n        address cfa,\\n        address acceptedToken,\\n        address paymentFactory\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(JOB_ADMIN, msg.sender);\\n\\n        _host = host;\\n        _cfa = cfa;\\n        _acceptedToken = acceptedToken;\\n        _paymentFactory = paymentFactory;\\n    }\\n\\n    function getAcceptedToken(uint256) override public view returns(address){\\n        return _acceptedToken;\\n    }\\n\\n    function updatePaymentFactory(address paymentFactory) public {\\n        require(hasRole(JOB_ADMIN, msg.sender), \\\"Not authorized\\\");\\n        _paymentFactory = paymentFactory;\\n    }\\n\\n\\n    modifier isPaymentFactory {\\n        require(msg.sender == _paymentFactory, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    function getAllowedFlow(uint256 jobId) public view override returns(int96){\\n        require(cashflowsRecipient[jobId] != address(0), \\\"Job CashFlow doesn't exists\\\");\\n        return TradeableCashflowWithAllowance(cashflowsRecipient[jobId])._allowedFlow();\\n    }\\n\\n\\n    function updateCashflowAllowance(uint256 jobId, int96 newAllowance) isPaymentFactory public override {\\n        require(cashflowsRecipient[jobId] != address(0), \\\"Job CashFlow doesn't exists\\\");\\n        TradeableCashflowWithAllowance(cashflowsRecipient[jobId]).updateAllowedFlow(newAllowance);\\n    }\\n\\n\\n\\n    function createNewCashflow(\\n        address recipient,\\n        address sender,\\n        uint256 jobId,\\n        int96 allowedFlow,\\n        int96 maxAllowedFlow,\\n        uint256 deadline\\n    ) isPaymentFactory public override returns(address){\\n        require(cashflowsRecipient[jobId] == address(0), \\\"JobId already used\\\");\\n        TradeableCashflowWithAllowance newFlow = new TradeableCashflowWithAllowance(recipient, allowedFlow, maxAllowedFlow, deadline, msg.sender, _host, _cfa, _acceptedToken);\\n        address flowAddress = address(newFlow);\\n        cashflowsRecipient[jobId] = flowAddress;\\n        cashflowsSender[jobId] = sender;\\n        //TODO: transfer money from msg.sender to address(newFlow)\\n        emit NewCashFlow(jobId, flowAddress, msg.sender);\\n        return flowAddress;\\n    }\\n \\n\\n}\\n\",\"keccak256\":\"0x0b531c322db955a816bb9dd464d21a08095bd71da94f27695b0f9f041668ecb5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005f0c38038062005f0c833981810160405260808110156200003757600080fd5b50805160208201516040830151606090930151919290916200005b600033620000db565b620000877f2146fb0650aa23d903841a16cbfadac001411640a1961091ac4ff13f0f16bcce33620000db565b600180546001600160a01b039586166001600160a01b0319918216179091556002805494861694821694909417909355600380549285169284169290921790915560048054919093169116179055620001ef565b620000e78282620000eb565b5050565b6000828152602081815260409091206200011091839062000a2462000164821b17901c565b15620000e7576200012062000184565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200017b836001600160a01b03841662000188565b90505b92915050565b3390565b6000620001968383620001d7565b620001ce575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200017e565b5060006200017e565b60009081526001919091016020526040902054151590565b615d0d80620001ff6000396000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c8063248a9ca314620000e75780632f2ff15d146200011957806336568abe146200014a57806357b5bdb514620001795780637da61ef514620001835780638b92fd4614620001bf5780639010d07c14620001f657806391d14854146200021c5780639273cd8f146200025f578063a217fddf14620002b2578063a2c909a414620002bc578063ad49075b14620002e5578063b2c23c551462000305578063beb460791462000325578063ca15c873146200034e578063d547741f146200036e575b600080fd5b6200010760048036036020811015620000ff57600080fd5b50356200039d565b60408051918252519081900360200190f35b62000148600480360360408110156200013157600080fd5b50803590602001356001600160a01b0316620003b2565b005b62000148600480360360408110156200016257600080fd5b50803590602001356001600160a01b031662000426565b620001076200048d565b620001a3600480360360208110156200019b57600080fd5b5035620004a0565b604080516001600160a01b039092168252519081900360200190f35b620001df60048036036020811015620001d757600080fd5b5035620004bb565b60408051600b9290920b8252519081900360200190f35b620001a3600480360360408110156200020e57600080fd5b5080359060200135620005a7565b6200024b600480360360408110156200023457600080fd5b50803590602001356001600160a01b0316620005ca565b604080519115158252519081900360200190f35b620001a3600480360360c08110156200027757600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135600b90810b91608081013590910b9060a00135620005e4565b62000107620007d0565b6200014860048036036040811015620002d457600080fd5b5080359060200135600b0b620007d5565b620001a360048036036020811015620002fd57600080fd5b503562000902565b620001a3600480360360208110156200031d57600080fd5b50356200091d565b62000148600480360360208110156200033d57600080fd5b50356001600160a01b03166200092d565b62000107600480360360208110156200036657600080fd5b5035620009ad565b62000148600480360360408110156200038657600080fd5b50803590602001356001600160a01b0316620009c6565b60009081526020819052604090206002015490565b600082815260208190526040902060020154620003d990620003d362000a3b565b620005ca565b620004165760405162461bcd60e51b815260040180806020018281038252602f81526020018062005c2a602f913960400191505060405180910390fd5b62000422828262000a3f565b5050565b6200043062000a3b565b6001600160a01b0316816001600160a01b031614620004815760405162461bcd60e51b815260040180806020018281038252602f81526020018062005ca9602f913960400191505060405180910390fd5b62000422828262000aad565b60008051602062005c8983398151915281565b6006602052600090815260409020546001600160a01b031681565b6000818152600560205260408120546001600160a01b031662000523576040805162461bcd60e51b815260206004820152601b60248201527a4a6f622043617368466c6f7720646f65736e27742065786973747360281b604482015290519081900360640190fd5b600082815260056020908152604091829020548251634d0e505560e11b815292516001600160a01b0390911692639a1ca0aa926004808301939192829003018186803b1580156200057357600080fd5b505afa15801562000588573d6000803e3d6000fd5b505050506040513d60208110156200059f57600080fd5b505192915050565b6000828152602081905260408120620005c1908362000b1b565b90505b92915050565b6000828152602081905260408120620005c1908362000b29565b6004546000906001600160a01b0316331462000638576040805162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6000858152600560205260409020546001600160a01b03161562000698576040805162461bcd60e51b8152602060048201526012602482015271129bd8925908185b1c9958591e481d5cd95960721b604482015290519081900360640190fd5b6001546002546003546040516000938b9389938993899333936001600160a01b039182169390821692911690620006cf9062000d02565b6001600160a01b039889168152600b97880b60208201529590960b60408087019190915260608601949094529186166080850152851660a0840152841660c08301529190921660e0830152519081900361010001906000f0801580156200073a573d6000803e3d6000fd5b50600087815260056020908152604080832080546001600160a01b038087166001600160a01b0319928316811790935560068552948390208054958e16959091169490941790935580518a8152918201929092523381830152905191925082917f3e8fa2e6c5cd4aeef5a3941795bb623686afe477826ab94b80711f5d6a079ab29181900360600190a198975050505050505050565b600081565b6004546001600160a01b0316331462000826576040805162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6000828152600560205260409020546001600160a01b03166200088e576040805162461bcd60e51b815260206004820152601b60248201527a4a6f622043617368466c6f7720646f65736e27742065786973747360281b604482015290519081900360640190fd5b6000828152600560205260408082205481516304c2c1e360e51b8152600b85900b600482015291516001600160a01b03909116926398583c60926024808201939182900301818387803b158015620008e557600080fd5b505af1158015620008fa573d6000803e3d6000fd5b505050505050565b6005602052600090815260409020546001600160a01b031681565b506003546001600160a01b031690565b6200094860008051602062005c8983398151915233620005ca565b6200098b576040805162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152602081905260408120620005c49062000b40565b600082815260208190526040902060020154620009e790620003d362000a3b565b620004815760405162461bcd60e51b815260040180806020018281038252603081526020018062005c596030913960400191505060405180910390fd5b6000620005c1836001600160a01b03841662000b4d565b3390565b600082815260208190526040902062000a59908262000a24565b15620004225762000a6962000a3b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902062000ac7908262000b9c565b15620004225762000ad762000a3b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000620005c1838362000bb3565b6000620005c1836001600160a01b03841662000c1a565b6000620005c48262000c32565b600062000b5b838362000c1a565b62000b9357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620005c4565b506000620005c4565b6000620005c1836001600160a01b03841662000c36565b8154600090821062000bf75760405162461bcd60e51b815260040180806020018281038252602281526020018062005c086022913960400191505060405180910390fd5b82600001828154811062000c0757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801562000cf7578354600019808301919081019060009087908390811062000c6b57fe5b906000526020600020015490508087600001848154811062000c8957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908062000cba57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050620005c4565b6000915050620005c4565b614ef78062000d118339019056fe60806040523480156200001157600080fd5b5060405162004ef738038062004ef783398181016040526101008110156200003857600080fd5b5080516020808301516040808501516060860151608087015160a088015160c089015160e09099015185518087018752600b8082526a4a6f6243617368666c6f7760a81b828b018190528851808a019099529088529887019890985297989597939692959194909391928491849184918c918c918c918c918c9190620000c56301ffc9a760e01b620004d5565b8151620000da90600690602085019062001007565b508051620000f090600790602084019062001007565b50620001036380ac58cd60e01b620004d5565b62000115635b5e139f60e01b620004d5565b6200012763780e9d6360e01b620004d5565b50506001600160a01b03881662000185576040805162461bcd60e51b815260206004820152601460248201527f686f7374206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038716620001e1576040805162461bcd60e51b815260206004820152601360248201527f636661206973207a65726f206164647265737300000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0386166200023d576040805162461bcd60e51b815260206004820152601d60248201527f6163636570746564546f6b656e206973207a65726f2061646472657373000000604482015290519081900360640190fd5b6001600160a01b03851662000299576040805162461bcd60e51b815260206004820152601860248201527f7265636569766572206973207a65726f20616464726573730000000000000000604482015290519081900360640190fd5b876001600160a01b0316633ca3ad4e866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015620002e757600080fd5b505afa158015620002fc573d6000803e3d6000fd5b505050506040513d60208110156200031357600080fd5b5051156200035d576040805162461bcd60e51b81526020600482015260126024820152710726563656976657220697320616e206170760741b604482015290519081900360640190fd5b82600b0b84600b0b1315620003b9576040805162461bcd60e51b815260206004820152601860248201527f5f6d6178416c6c6f776564466c6f77206f766572666c6f770000000000000000604482015290519081900360640190fd5b600a80546001600160a01b03199081166001600160a01b038b81169190911792839055600b805483168b8316178155600c805484168b8416179055600d805484168a8416179055600e8054909316858316178216600160a01b6001600160601b038a840b81169190910291909117909355600f80546001600160601b0319169188900b909316179091556010849055604080516315a722b960e31b815264150000000160048201819052915191939092169163ad3915c891602480830192600092919082900301818387803b1580156200049257600080fd5b505af1158015620004a7573d6000803e3d6000fd5b50505050505050505050505050620004c78860016200055a60201b60201c565b5050505050505050620010b3565b6001600160e01b0319808216141562000535576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b6001600160a01b038216620005b6576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b620005c181620006ae565b1562000614576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6200062260008383620006d1565b6001600160a01b03821660009081526001602090815260409091206200065391839062001ad6620006e1821b17901c565b506200067181836002620006f660201b62001ae2179092919060201c565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620006cb8260026200071660201b62001b021790919060201c565b92915050565b620006dc8262000724565b505050565b6000620006ef83836200097c565b9392505050565b60006200070e84846001600160a01b038516620009cb565b949350505050565b6000620006ef838362000a66565b6001600160a01b03811662000780576040805162461bcd60e51b815260206004820152601c60248201527f4e6577207265636569766572206973207a65726f206164647265737300000000604482015290519081900360640190fd5b600a5460408051631e51d6a760e11b81526001600160a01b03848116600483015291519190921691633ca3ad4e916024808301926020929190829003018186803b158015620007ce57600080fd5b505afa158015620007e3573d6000803e3d6000fd5b505050506040513d6020811015620007fa57600080fd5b5051156200083a5760405162461bcd60e51b815260040180806020018281038252602281526020018062004ed56022913960400191505060405180910390fd5b600d546001600160a01b0382811691161415620008575762000979565b600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251600093929092169163e6a1e88891606480820192608092909190829003018186803b158015620008bc57600080fd5b505afa158015620008d1573d6000803e3d6000fd5b505050506040513d6080811015620008e857600080fd5b506020015190506000600b82900b13156200092057600d5462000914906001600160a01b031662000a7e565b62000920828262000d39565b600d80546001600160a01b0319166001600160a01b03848116919091179182905560408051929091168252517f7dfb1d59db37a3fd2e15e796c189dcab714cdbb18650d68a1de58f8fa60718c9916020908290030190a1505b50565b60006200098a838362000a66565b620009c257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620006cb565b506000620006cb565b60008281526001840160205260408120548062000a32575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055620006ef565b8285600001600183038154811062000a4657fe5b9060005260206000209060020201600101819055506000915050620006ef565b60009081526001919091016020526040902054151590565b600a54600b54600c5460408051600080825260208201928390526001600160a01b039384166044830181815230606485018190528987166084860152608060a48601908152855160c48701819052998816996339255d5b999890981697635a5999e360e11b97949692958c9593949360e486019290918190849084905b8381101562000b1557818101518382015260200162000afb565b50505050905090810190601f16801562000b435780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b8381101562000bd757818101518382015260200162000bbd565b50505050905090810190601f16801562000c055780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801562000c4057600080fd5b505af115801562000c55573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562000c7f57600080fd5b810190808051604051939291908464010000000082111562000ca057600080fd5b90830190602082018581111562000cb657600080fd5b825164010000000081118282018810171562000cd157600080fd5b82525081516020918201929091019080838360005b8381101562000d0057818101518382015260200162000ce6565b50505050905090810190601f16801562000d2e5780820380516001836020036101000a031916815260200191505b506040525050505050565b600a54600b54600c54604080516000808252602082019092526001600160a01b03948516946339255d5b9481169363317e182f60e11b9391169188918891905060405160240180856001600160a01b03168152602001846001600160a01b0316815260200183600b0b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101562000de257818101518382015260200162000dc8565b50505050905090810190601f16801562000e105780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b8381101562000ea457818101518382015260200162000e8a565b50505050905090810190601f16801562000ed25780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801562000f0d57600080fd5b505af115801562000f22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562000f4c57600080fd5b810190808051604051939291908464010000000082111562000f6d57600080fd5b90830190602082018581111562000f8357600080fd5b825164010000000081118282018810171562000f9e57600080fd5b82525081516020918201929091019080838360005b8381101562000fcd57818101518382015260200162000fb3565b50505050905090810190601f16801562000ffb5780820380516001836020036101000a031916815260200191505b50604052505050505050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200103f57600085556200108a565b82601f106200105a57805160ff19168380011785556200108a565b828001600101855582156200108a579182015b828111156200108a5782518255916020019190600101906200106d565b50620010989291506200109c565b5090565b5b808211156200109857600081556001016200109d565b613e1280620010c36000396000f3fe608060405234801561001057600080fd5b506004361061016a5760003560e01c806301ffc9a71461016f57806302964ff1146101aa57806306fdde03146101ce578063081812fc1461024b578063095ea7b31461026857806318160ddd146102965780631b8db774146102b0578063230dbd29146102b857806323b872dd146103e657806328d2bf941461041c5780632f745c591461044d57806330d9c915146104795780633d384b3b1461055757806342842e0e146105765780634f6ccce7146105ac57806353c11f99146105c95780635f9e7d77146106f75780636352211e146107d55780636c0360eb146107f257806370a08231146107fa578063884d1f401461082057806395d89b41146108fe57806398583c60146109065780639a1ca0aa14610926578063a22cb4651461092e578063b88d4fde1461095c578063c87b56dd14610a20578063cbd4946214610a3d578063d86ed3e5146102b8578063e985e9c514610a45575b600080fd5b6101966004803603602081101561018557600080fd5b50356001600160e01b031916610a73565b604080519115158252519081900360200190f35b6101b2610a96565b604080516001600160a01b039092168252519081900360200190f35b6101d6610aa5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102105781810151838201526020016101f8565b50505050905090810190601f16801561023d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b26004803603602081101561026157600080fd5b5035610b3b565b6102946004803603604081101561027e57600080fd5b506001600160a01b038135169060200135610b9d565b005b61029e610c78565b60408051918252519081900360200190f35b61029e610c89565b6101d6600480360360c08110156102ce57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561030857600080fd5b82018360208201111561031a57600080fd5b803590602001918460018302840111600160201b8311171561033b57600080fd5b919390929091602081019035600160201b81111561035857600080fd5b82018360208201111561036a57600080fd5b803590602001918460018302840111600160201b8311171561038b57600080fd5b919390929091602081019035600160201b8111156103a857600080fd5b8201836020820111156103ba57600080fd5b803590602001918460018302840111600160201b831117156103db57600080fd5b509092509050610c8f565b610294600480360360608110156103fc57600080fd5b506001600160a01b03813581169160208101359091169060400135610e4a565b610424610ea1565b604080519384526001600160a01b039092166020840152600b0b82820152519081900360600190f35b61029e6004803603604081101561046357600080fd5b506001600160a01b038135169060200135610f67565b6101d6600480360360a081101561048f57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156104c957600080fd5b8201836020820111156104db57600080fd5b803590602001918460018302840111600160201b831117156104fc57600080fd5b919390929091602081019035600160201b81111561051957600080fd5b82018360208201111561052b57600080fd5b803590602001918460018302840111600160201b8311171561054c57600080fd5b509092509050610f92565b61055f610fcb565b60408051600b9290920b8252519081900360200190f35b6102946004803603606081101561058c57600080fd5b506001600160a01b03813581169160208101359091169060400135610fd4565b61029e600480360360208110156105c257600080fd5b5035610fef565b6101d6600480360360c08110156105df57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561061957600080fd5b82018360208201111561062b57600080fd5b803590602001918460018302840111600160201b8311171561064c57600080fd5b919390929091602081019035600160201b81111561066957600080fd5b82018360208201111561067b57600080fd5b803590602001918460018302840111600160201b8311171561069c57600080fd5b919390929091602081019035600160201b8111156106b957600080fd5b8201836020820111156106cb57600080fd5b803590602001918460018302840111600160201b831117156106ec57600080fd5b509092509050611005565b6101d6600480360360a081101561070d57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561074757600080fd5b82018360208201111561075957600080fd5b803590602001918460018302840111600160201b8311171561077a57600080fd5b919390929091602081019035600160201b81111561079757600080fd5b8201836020820111156107a957600080fd5b803590602001918460018302840111600160201b831117156107ca57600080fd5b50909250905061117e565b6101b2600480360360208110156107eb57600080fd5b50356111b7565b6101d66111df565b61029e6004803603602081101561081057600080fd5b50356001600160a01b0316611240565b6101d6600480360360a081101561083657600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561087057600080fd5b82018360208201111561088257600080fd5b803590602001918460018302840111600160201b831117156108a357600080fd5b919390929091602081019035600160201b8111156108c057600080fd5b8201836020820111156108d257600080fd5b803590602001918460018302840111600160201b831117156108f357600080fd5b5090925090506112a8565b6101d66112e1565b6102946004803603602081101561091c57600080fd5b5035600b0b611342565b61055f6116a9565b6102946004803603604081101561094457600080fd5b506001600160a01b03813516906020013515156116b9565b6102946004803603608081101561097257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156109ac57600080fd5b8201836020820111156109be57600080fd5b803590602001918460018302840111600160201b831117156109df57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506117ba945050505050565b6101d660048036036020811015610a3657600080fd5b5035611818565b6101b2611a99565b61019660048036036040811015610a5b57600080fd5b506001600160a01b0381358116916020013516611aa8565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b600d546001600160a01b031681565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b820191906000526020600020905b815481529060010190602001808311610b1457829003601f168201915b5050505050905090565b6000610b4682611b0e565b610b815760405162461bcd60e51b815260040180806020018281038252602c815260200180613c89602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610ba8826111b7565b9050806001600160a01b0316836001600160a01b03161415610bfb5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d0d6021913960400191505060405180910390fd5b806001600160a01b0316610c0d611b1b565b6001600160a01b03161480610c2e5750610c2e81610c29611b1b565b611aa8565b610c695760405162461bcd60e51b8152600401808060200182810382526038815260200180613bba6038913960400191505060405180910390fd5b610c738383611b1f565b505050565b6000610c846002611b8d565b905090565b60105481565b60608989610c9c82611b98565b610ced576040805162461bcd60e51b815260206004820152601f60248201527f5265646972656374416c6c3a206e6f7420616363657074656420746f6b656e00604482015290519081900360640190fd5b610cf681611bac565b610d315760405162461bcd60e51b8152600401808060200182810382526021815260200180613aa26021913960400191505060405180910390fd5b600a546001600160a01b03163314610d7a5760405162461bcd60e51b8152600401808060200182810382526022815260200180613b286022913960400191505060405180910390fd5b6000808a8a6040811015610d8d57600080fd5b50604080516001600160a01b03833581168083526020948501359091169382018490528251909550929350600080516020613b9a833981519152929081900390910190a1600e546001600160a01b0383811691161415610dfa57610df18787611c3b565b94505050610e3b565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929750610e3b945050505050565b50509998505050505050505050565b610e5b610e55611b1b565b82611f3f565b610e965760405162461bcd60e51b8152600401808060200182810382526031815260200180613d5d6031913960400191505060405180910390fd5b610c73838383611fe3565b600d54600090819081906001600160a01b031615610f6257600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251919092169163e6a1e888916064808301926080929190829003018186803b158015610f1957600080fd5b505afa158015610f2d573d6000803e3d6000fd5b505050506040513d6080811015610f4357600080fd5b508051602090910151600d549194506001600160a01b03909116925090505b909192565b6001600160a01b0382166000908152600160205260408120610f89908361212f565b90505b92915050565b606060405162461bcd60e51b815260040180806020018281038252602f815260200180613d8e602f913960400191505060405180910390fd5b600f54600b0b81565b610c73838383604051806020016040528060008152506117ba565b600080610ffd60028461213b565b509392505050565b600a546060906001600160a01b031633146110515760405162461bcd60e51b8152600401808060200182810382526022815260200180613b286022913960400191505060405180910390fd5b61105a8a611b98565b158061106c575061106a89611bac565b155b156110b05782828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061117192505050565b600080888860408110156110c357600080fd5b50604080516001600160a01b03833581168083526020948501359091169382018490528251909550929350600080516020613b9a833981519152929081900390910190a1600e546001600160a01b0383811691161415611130576111278585611c3b565b92505050611171565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611171945050505050565b9998505050505050505050565b606060405162461bcd60e51b8152600401808060200182810382526033815260200180613af56033913960400191505060405180910390fd5b6000610f8c82604051806060016040528060298152602001613c1c6029913960029190612157565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b60006001600160a01b0382166112875760405162461bcd60e51b815260040180806020018281038252602a815260200180613bf2602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610f8c90611b8d565b606060405162461bcd60e51b815260040180806020018281038252602f815260200180613d2e602f913960400191505060405180910390fd5b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b600e54600b82810b600160a01b909204810b900b1415611361576116a6565b600f54600b90810b810b9082900b13156113bd576040805162461bcd60e51b81526020600482015260186024820152775f6d6178416c6c6f776564466c6f77206f766572666c6f7760401b604482015290519081900360640190fd5b6010544211156113cf576113cf612164565b600e8054600b83810b6001600160601b0316600160a01b026001600160a01b03928316179283905554600c5460408051631cd43d1160e31b8152918416600483015293831660248201523060448201529251600093919092169163e6a1e88891606480820192608092909190829003018186803b15801561144f57600080fd5b505afa158015611463573d6000803e3d6000fd5b505050506040513d608081101561147957600080fd5b5060200151600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d608081101561150e57600080fd5b5060200151600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b15801561157957600080fd5b505afa15801561158d573d6000803e3d6000fd5b505050506040513d60808110156115a357600080fd5b50602001519050600083600b84900b156115cc57600d546115cc906001600160a01b0316612391565b82600b0b6000146115ec57600e546115ec906001600160a01b0316612391565b600085600b0b131561166c57600e54600160a01b9004600b90810b810b9086900b131561162857600e54600160a01b9004600b0b850391508190035b600081600b0b131561164a57600d5461164a906001600160a01b03168261263b565b600082600b0b131561166c57600e5461166c906001600160a01b03168361263b565b60408051600b87810b825283810b602083015284900b818301529051600080516020613dbd8339815191529181900360600190a150505050505b50565b600e54600160a01b9004600b0b81565b6116c1611b1b565b6001600160a01b0316826001600160a01b03161415611723576040805162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015290519081900360640190fd5b8060056000611730611b1b565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611774611b1b565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6117cb6117c5611b1b565b83611f3f565b6118065760405162461bcd60e51b8152600401808060200182810382526031815260200180613d5d6031913960400191505060405180910390fd5b611812848484846128f8565b50505050565b606061182382611b0e565b61185e5760405162461bcd60e51b815260040180806020018281038252602f815260200180613cde602f913960400191505060405180910390fd5b60008281526008602090815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156118f15780601f106118c6576101008083540402835291602001916118f1565b820191906000526020600020905b8154815290600101906020018083116118d457829003601f168201915b5050505050905060006119026111df565b905080516000141561191657509050610a91565b8151156119d75780826040516020018083805190602001908083835b602083106119515780518252601f199092019160209182019101611932565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106119995780518252601f19909201916020918201910161197a565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610a91565b806119e18561294a565b6040516020018083805190602001908083835b60208310611a135780518252601f1990920191602091820191016119f4565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611a5b5780518252601f199092019160209182019101611a3c565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b600e546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610f898383612a24565b6000611af884846001600160a01b038516612a6e565b90505b9392505050565b6000610f898383612b05565b6000610f8c600283611b02565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b54826111b7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610f8c82612b1d565b600c546001600160a01b0390811691161490565b60007fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3826001600160a01b0316637730599e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0857600080fd5b505afa158015611c1c573d6000803e3d6000fd5b505050506040513d6020811015611c3257600080fd5b50511492915050565b606082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b03938416600482015291831660248301523060448301525197985092969116945063e6a1e888935060648083019350608092829003018186803b158015611cd357600080fd5b505afa158015611ce7573d6000803e3d6000fd5b505050506040513d6080811015611cfd57600080fd5b5060200151600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b158015611d6857600080fd5b505afa158015611d7c573d6000803e3d6000fd5b505050506040513d6080811015611d9257600080fd5b5060200151600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b158015611dfd57600080fd5b505afa158015611e11573d6000803e3d6000fd5b505050506040513d6080811015611e2757600080fd5b50602001519050600083600b84900b15611e5457600d54611e51906001600160a01b031687612b21565b95505b82600b0b600014611e7857600e54611e75906001600160a01b031687612b21565b95505b600085600b0b1315611f0057600e54600160a01b9004600b90810b810b9086900b1315611eb457600e54600160a01b9004600b0b850391508190035b600081600b0b1315611eda57600d54611ed7906001600160a01b03168288612eec565b95505b600082600b0b1315611f0057600e54611efd906001600160a01b03168388612eec565b95505b60408051600b87810b825283810b602083015284900b818301529051600080516020613dbd8339815191529181900360600190a1505050505092915050565b6000611f4a82611b0e565b611f855760405162461bcd60e51b815260040180806020018281038252602c815260200180613b6e602c913960400191505060405180910390fd5b6000611f90836111b7565b9050806001600160a01b0316846001600160a01b03161480611fcb5750836001600160a01b0316611fc084610b3b565b6001600160a01b0316145b80611fdb5750611fdb8185611aa8565b949350505050565b826001600160a01b0316611ff6826111b7565b6001600160a01b03161461203b5760405162461bcd60e51b8152600401808060200182810382526029815260200180613cb56029913960400191505060405180910390fd5b6001600160a01b0382166120805760405162461bcd60e51b8152600401808060200182810382526024815260200180613b4a6024913960400191505060405180910390fd5b61208b8383836132bc565b612096600082611b1f565b6001600160a01b03831660009081526001602052604090206120b890826132c5565b506001600160a01b03821660009081526001602052604090206120db9082611ad6565b506120e860028284611ae2565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610f8983836132d1565b600080808061214a8686613335565b9097909650945050505050565b6000611af88484846133b0565b600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152918316602483015230604483015251600093929092169163e6a1e88891606480820192608092909190829003018186803b1580156121c857600080fd5b505afa1580156121dc573d6000803e3d6000fd5b505050506040513d60808110156121f257600080fd5b5060200151600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d608081101561228757600080fd5b5060200151600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b1580156122f257600080fd5b505afa158015612306573d6000803e3d6000fd5b505050506040513d608081101561231c57600080fd5b5060200151905082600b83900b1561234357600d54612343906001600160a01b0316612391565b81600b0b60001461236357600e54612363906001600160a01b0316612391565b600084600b0b131561181257600081600b0b131561181257600e54611812906001600160a01b03168261263b565b600a54600b54600c5460408051600080825260208201928390526001600160a01b039384166044830181815230606485018190528987166084860152608060a48601908152855160c48701819052998816996339255d5b999890981697635a5999e360e11b97949692958c9593949360e486019290918190849084905b8381101561242657818101518382015260200161240e565b50505050905090810190601f1680156124535780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b838110156124e55781810151838201526020016124cd565b50505050905090810190601f1680156125125780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801561254c57600080fd5b505af1158015612560573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561258957600080fd5b8101908080516040519392919084600160201b8211156125a857600080fd5b9083019060208201858111156125bd57600080fd5b8251600160201b8111828201881017156125d657600080fd5b82525081516020918201929091019080838360005b838110156126035781810151838201526020016125eb565b50505050905090810190601f1680156126305780820380516001836020036101000a031916815260200191505b506040525050505050565b600a54600b54600c54604080516000808252602082019092526001600160a01b03948516946339255d5b9481169363317e182f60e11b9391169188918891905060405160240180856001600160a01b03168152602001846001600160a01b0316815260200183600b0b815260200180602001828103825283818151815260200191508051906020019080838360005b838110156126e25781810151838201526020016126ca565b50505050905090810190601f16801561270f5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b838110156127a1578181015183820152602001612789565b50505050905090810190601f1680156127ce5780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801561280857600080fd5b505af115801561281c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561284557600080fd5b8101908080516040519392919084600160201b82111561286457600080fd5b90830190602082018581111561287957600080fd5b8251600160201b81118282018810171561289257600080fd5b82525081516020918201929091019080838360005b838110156128bf5781810151838201526020016128a7565b50505050905090810190601f1680156128ec5780820380516001836020036101000a031916815260200191505b50604052505050505050565b612903848484611fe3565b61290f8484848461347a565b6118125760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac36032913960400191505060405180910390fd5b60608161296f57506040805180820190915260018152600360fc1b6020820152610a91565b8160005b811561298757600101600a82049150612973565b6000816001600160401b038111801561299f57600080fd5b506040519080825280601f01601f1916602001820160405280156129ca576020820181803683370190505b50859350905060001982015b8315612a1b57600a840660300160f81b828280600190039350815181106129f957fe5b60200101906001600160f81b031916908160001a905350600a840493506129d6565b50949350505050565b6000612a308383612b05565b612a6657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f8c565b506000610f8c565b600082815260018401602052604081205480612ad3575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611afb565b82856000016001830381548110612ae657fe5b9060005260206000209060020201600101819055506000915050611afb565b60009081526001919091016020526040902054151590565b5490565b600a54600b54600c5460408051600080825260208201928390526001600160a01b039384166044830181815230606485018190528a87166084860152608060a48601908152855160c4870181905260609a891699634329d293991697635a5999e360e11b97959693958e95909490939260e4860192918190849084905b83811015612bb6578181015183820152602001612b9e565b50505050905090810190601f168015612be35780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015612c82578181015183820152602001612c6a565b50505050905090810190601f168015612caf5780820380516001836020036101000a031916815260200191505b508481038352600281526020018061060f60f31b815250602001848103825285818151815260200191508051906020019080838360005b83811015612cfe578181015183820152602001612ce6565b50505050905090810190601f168015612d2b5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015612d4e57600080fd5b505af1158015612d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612d8b57600080fd5b8101908080516040519392919084600160201b821115612daa57600080fd5b908301906020820185811115612dbf57600080fd5b8251600160201b811182820188101715612dd857600080fd5b82525081516020918201929091019080838360005b83811015612e05578181015183820152602001612ded565b50505050905090810190601f168015612e325780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b821115612e5457600080fd5b908301906020820185811115612e6957600080fd5b8251600160201b811182820188101715612e8257600080fd5b82525081516020918201929091019080838360005b83811015612eaf578181015183820152602001612e97565b50505050905090810190601f168015612edc5780820380516001836020036101000a031916815260200191505b5060405250929695505050505050565b600a54600b8054600c5460408051600080825260208201928390526001600160a01b03938416604483018181528b86166064850152968a900b6084840152608060a48401908152835160c48501819052606099871698634329d29398979097169663317e182f60e11b9693958e958e959194929360e4860192918190849084905b83811015612f85578181015183820152602001612f6d565b50505050905090810190601f168015612fb25780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015613051578181015183820152602001613039565b50505050905090810190601f16801561307e5780820380516001836020036101000a031916815260200191505b508481038352600281526020018061060f60f31b815250602001848103825285818151815260200191508051906020019080838360005b838110156130cd5781810151838201526020016130b5565b50505050905090810190601f1680156130fa5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561311d57600080fd5b505af1158015613131573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561315a57600080fd5b8101908080516040519392919084600160201b82111561317957600080fd5b90830190602082018581111561318e57600080fd5b8251600160201b8111828201881017156131a757600080fd5b82525081516020918201929091019080838360005b838110156131d45781810151838201526020016131bc565b50505050905090810190601f1680156132015780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b82111561322357600080fd5b90830190602082018581111561323857600080fd5b8251600160201b81118282018810171561325157600080fd5b82525081516020918201929091019080838360005b8381101561327e578181015183820152602001613266565b50505050905090810190601f1680156132ab5780820380516001836020036101000a031916815260200191505b506040525092979650505050505050565b610c73826135e2565b6000610f898383613828565b815460009082106133135760405162461bcd60e51b8152600401808060200182810382526022815260200180613a806022913960400191505060405180910390fd5b82600001828154811061332257fe5b9060005260206000200154905092915050565b8154600090819083106133795760405162461bcd60e51b8152600401808060200182810382526022815260200180613c676022913960400191505060405180910390fd5b600084600001848154811061338a57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000828152600184016020526040812054828161344b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134105781810151838201526020016133f8565b50505050905090810190601f16801561343d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061345e57fe5b9060005260206000209060020201600101549150509392505050565b600061348e846001600160a01b03166138ee565b61349a57506001611fdb565b60006135a8630a85bd0160e11b6134af611b1b565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156135165781810151838201526020016134fe565b50505050905090810190601f1680156135435780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613ac3603291396001600160a01b03881691906138f4565b905060008180602001905160208110156135c157600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b6001600160a01b03811661363c576040805162461bcd60e51b815260206004820152601c60248201527b4e6577207265636569766572206973207a65726f206164647265737360201b604482015290519081900360640190fd5b600a5460408051631e51d6a760e11b81526001600160a01b03848116600483015291519190921691633ca3ad4e916024808301926020929190829003018186803b15801561368957600080fd5b505afa15801561369d573d6000803e3d6000fd5b505050506040513d60208110156136b357600080fd5b5051156136f15760405162461bcd60e51b8152600401808060200182810382526022815260200180613c456022913960400191505060405180910390fd5b600d546001600160a01b038281169116141561370c576116a6565b600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251600093929092169163e6a1e88891606480820192608092909190829003018186803b15801561377057600080fd5b505afa158015613784573d6000803e3d6000fd5b505050506040513d608081101561379a57600080fd5b506020015190506000600b82900b13156137cd57600d546137c3906001600160a01b0316612391565b6137cd828261263b565b600d80546001600160a01b0319166001600160a01b03848116919091179182905560408051929091168252517f7dfb1d59db37a3fd2e15e796c189dcab714cdbb18650d68a1de58f8fa60718c9916020908290030190a15050565b600081815260018301602052604081205480156138e4578354600019808301919081019060009087908390811061385b57fe5b906000526020600020015490508087600001848154811061387857fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806138a857fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610f8c565b6000915050610f8c565b3b151590565b6060611af8848460008585613908856138ee565b613959576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106139975780518252601f199092019160209182019101613978565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146139f9576040519150601f19603f3d011682016040523d82523d6000602084013e6139fe565b606091505b5091509150613a0e828286613a19565b979650505050505050565b60608315613a28575081611afb565b825115613a385782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156134105781810151838201526020016133f856fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64735265646972656374416c6c3a206f6e6c7920434641763120737570706f727465644552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572556e737570706f727465642063616c6c6261636b202d20204265666f72652041677265656d656e74205465726d696e617465645265646972656374416c6c3a20737570706f7274206f6e6c79206f6e6520686f73744552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656ec87e7a7e3edb09ee472572453ff451b078bc87d41904d6fceb24066a3646207e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4e65772072656365697665722063616e206e6f742062652061207375706572417070456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572556e737570706f727465642063616c6c6261636b202d204265666f72652041677265656d656e7420757064617465644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564556e737570706f727465642063616c6c6261636b202d204265666f72652041677265656d656e7420437265617465648e4da29935c23d4473a2096cf03e1be0d236a6888042afd7c80746ff99666b72a2646970667358221220c36aacbcc1ae6c9b25af483b4067c74e044154a55eca5a20ed6afa48f6cc7fa464736f6c634300070600334e65772072656365697665722063616e206e6f742062652061207375706572417070456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b652146fb0650aa23d903841a16cbfadac001411640a1961091ac4ff13f0f16bcce416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220f5821697249a35211938e1fcf95b9fb67b45f66b711da64f0facfc3055dc128b64736f6c63430007060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e25760003560e01c8063248a9ca314620000e75780632f2ff15d146200011957806336568abe146200014a57806357b5bdb514620001795780637da61ef514620001835780638b92fd4614620001bf5780639010d07c14620001f657806391d14854146200021c5780639273cd8f146200025f578063a217fddf14620002b2578063a2c909a414620002bc578063ad49075b14620002e5578063b2c23c551462000305578063beb460791462000325578063ca15c873146200034e578063d547741f146200036e575b600080fd5b6200010760048036036020811015620000ff57600080fd5b50356200039d565b60408051918252519081900360200190f35b62000148600480360360408110156200013157600080fd5b50803590602001356001600160a01b0316620003b2565b005b62000148600480360360408110156200016257600080fd5b50803590602001356001600160a01b031662000426565b620001076200048d565b620001a3600480360360208110156200019b57600080fd5b5035620004a0565b604080516001600160a01b039092168252519081900360200190f35b620001df60048036036020811015620001d757600080fd5b5035620004bb565b60408051600b9290920b8252519081900360200190f35b620001a3600480360360408110156200020e57600080fd5b5080359060200135620005a7565b6200024b600480360360408110156200023457600080fd5b50803590602001356001600160a01b0316620005ca565b604080519115158252519081900360200190f35b620001a3600480360360c08110156200027757600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135600b90810b91608081013590910b9060a00135620005e4565b62000107620007d0565b6200014860048036036040811015620002d457600080fd5b5080359060200135600b0b620007d5565b620001a360048036036020811015620002fd57600080fd5b503562000902565b620001a3600480360360208110156200031d57600080fd5b50356200091d565b62000148600480360360208110156200033d57600080fd5b50356001600160a01b03166200092d565b62000107600480360360208110156200036657600080fd5b5035620009ad565b62000148600480360360408110156200038657600080fd5b50803590602001356001600160a01b0316620009c6565b60009081526020819052604090206002015490565b600082815260208190526040902060020154620003d990620003d362000a3b565b620005ca565b620004165760405162461bcd60e51b815260040180806020018281038252602f81526020018062005c2a602f913960400191505060405180910390fd5b62000422828262000a3f565b5050565b6200043062000a3b565b6001600160a01b0316816001600160a01b031614620004815760405162461bcd60e51b815260040180806020018281038252602f81526020018062005ca9602f913960400191505060405180910390fd5b62000422828262000aad565b60008051602062005c8983398151915281565b6006602052600090815260409020546001600160a01b031681565b6000818152600560205260408120546001600160a01b031662000523576040805162461bcd60e51b815260206004820152601b60248201527a4a6f622043617368466c6f7720646f65736e27742065786973747360281b604482015290519081900360640190fd5b600082815260056020908152604091829020548251634d0e505560e11b815292516001600160a01b0390911692639a1ca0aa926004808301939192829003018186803b1580156200057357600080fd5b505afa15801562000588573d6000803e3d6000fd5b505050506040513d60208110156200059f57600080fd5b505192915050565b6000828152602081905260408120620005c1908362000b1b565b90505b92915050565b6000828152602081905260408120620005c1908362000b29565b6004546000906001600160a01b0316331462000638576040805162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6000858152600560205260409020546001600160a01b03161562000698576040805162461bcd60e51b8152602060048201526012602482015271129bd8925908185b1c9958591e481d5cd95960721b604482015290519081900360640190fd5b6001546002546003546040516000938b9389938993899333936001600160a01b039182169390821692911690620006cf9062000d02565b6001600160a01b039889168152600b97880b60208201529590960b60408087019190915260608601949094529186166080850152851660a0840152841660c08301529190921660e0830152519081900361010001906000f0801580156200073a573d6000803e3d6000fd5b50600087815260056020908152604080832080546001600160a01b038087166001600160a01b0319928316811790935560068552948390208054958e16959091169490941790935580518a8152918201929092523381830152905191925082917f3e8fa2e6c5cd4aeef5a3941795bb623686afe477826ab94b80711f5d6a079ab29181900360600190a198975050505050505050565b600081565b6004546001600160a01b0316331462000826576040805162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6000828152600560205260409020546001600160a01b03166200088e576040805162461bcd60e51b815260206004820152601b60248201527a4a6f622043617368466c6f7720646f65736e27742065786973747360281b604482015290519081900360640190fd5b6000828152600560205260408082205481516304c2c1e360e51b8152600b85900b600482015291516001600160a01b03909116926398583c60926024808201939182900301818387803b158015620008e557600080fd5b505af1158015620008fa573d6000803e3d6000fd5b505050505050565b6005602052600090815260409020546001600160a01b031681565b506003546001600160a01b031690565b6200094860008051602062005c8983398151915233620005ca565b6200098b576040805162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152602081905260408120620005c49062000b40565b600082815260208190526040902060020154620009e790620003d362000a3b565b620004815760405162461bcd60e51b815260040180806020018281038252603081526020018062005c596030913960400191505060405180910390fd5b6000620005c1836001600160a01b03841662000b4d565b3390565b600082815260208190526040902062000a59908262000a24565b15620004225762000a6962000a3b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902062000ac7908262000b9c565b15620004225762000ad762000a3b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000620005c1838362000bb3565b6000620005c1836001600160a01b03841662000c1a565b6000620005c48262000c32565b600062000b5b838362000c1a565b62000b9357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620005c4565b506000620005c4565b6000620005c1836001600160a01b03841662000c36565b8154600090821062000bf75760405162461bcd60e51b815260040180806020018281038252602281526020018062005c086022913960400191505060405180910390fd5b82600001828154811062000c0757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801562000cf7578354600019808301919081019060009087908390811062000c6b57fe5b906000526020600020015490508087600001848154811062000c8957fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908062000cba57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050620005c4565b6000915050620005c4565b614ef78062000d118339019056fe60806040523480156200001157600080fd5b5060405162004ef738038062004ef783398181016040526101008110156200003857600080fd5b5080516020808301516040808501516060860151608087015160a088015160c089015160e09099015185518087018752600b8082526a4a6f6243617368666c6f7760a81b828b018190528851808a019099529088529887019890985297989597939692959194909391928491849184918c918c918c918c918c9190620000c56301ffc9a760e01b620004d5565b8151620000da90600690602085019062001007565b508051620000f090600790602084019062001007565b50620001036380ac58cd60e01b620004d5565b62000115635b5e139f60e01b620004d5565b6200012763780e9d6360e01b620004d5565b50506001600160a01b03881662000185576040805162461bcd60e51b815260206004820152601460248201527f686f7374206973207a65726f2061646472657373000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038716620001e1576040805162461bcd60e51b815260206004820152601360248201527f636661206973207a65726f206164647265737300000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0386166200023d576040805162461bcd60e51b815260206004820152601d60248201527f6163636570746564546f6b656e206973207a65726f2061646472657373000000604482015290519081900360640190fd5b6001600160a01b03851662000299576040805162461bcd60e51b815260206004820152601860248201527f7265636569766572206973207a65726f20616464726573730000000000000000604482015290519081900360640190fd5b876001600160a01b0316633ca3ad4e866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015620002e757600080fd5b505afa158015620002fc573d6000803e3d6000fd5b505050506040513d60208110156200031357600080fd5b5051156200035d576040805162461bcd60e51b81526020600482015260126024820152710726563656976657220697320616e206170760741b604482015290519081900360640190fd5b82600b0b84600b0b1315620003b9576040805162461bcd60e51b815260206004820152601860248201527f5f6d6178416c6c6f776564466c6f77206f766572666c6f770000000000000000604482015290519081900360640190fd5b600a80546001600160a01b03199081166001600160a01b038b81169190911792839055600b805483168b8316178155600c805484168b8416179055600d805484168a8416179055600e8054909316858316178216600160a01b6001600160601b038a840b81169190910291909117909355600f80546001600160601b0319169188900b909316179091556010849055604080516315a722b960e31b815264150000000160048201819052915191939092169163ad3915c891602480830192600092919082900301818387803b1580156200049257600080fd5b505af1158015620004a7573d6000803e3d6000fd5b50505050505050505050505050620004c78860016200055a60201b60201c565b5050505050505050620010b3565b6001600160e01b0319808216141562000535576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b6001600160a01b038216620005b6576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b620005c181620006ae565b1562000614576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6200062260008383620006d1565b6001600160a01b03821660009081526001602090815260409091206200065391839062001ad6620006e1821b17901c565b506200067181836002620006f660201b62001ae2179092919060201c565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620006cb8260026200071660201b62001b021790919060201c565b92915050565b620006dc8262000724565b505050565b6000620006ef83836200097c565b9392505050565b60006200070e84846001600160a01b038516620009cb565b949350505050565b6000620006ef838362000a66565b6001600160a01b03811662000780576040805162461bcd60e51b815260206004820152601c60248201527f4e6577207265636569766572206973207a65726f206164647265737300000000604482015290519081900360640190fd5b600a5460408051631e51d6a760e11b81526001600160a01b03848116600483015291519190921691633ca3ad4e916024808301926020929190829003018186803b158015620007ce57600080fd5b505afa158015620007e3573d6000803e3d6000fd5b505050506040513d6020811015620007fa57600080fd5b5051156200083a5760405162461bcd60e51b815260040180806020018281038252602281526020018062004ed56022913960400191505060405180910390fd5b600d546001600160a01b0382811691161415620008575762000979565b600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251600093929092169163e6a1e88891606480820192608092909190829003018186803b158015620008bc57600080fd5b505afa158015620008d1573d6000803e3d6000fd5b505050506040513d6080811015620008e857600080fd5b506020015190506000600b82900b13156200092057600d5462000914906001600160a01b031662000a7e565b62000920828262000d39565b600d80546001600160a01b0319166001600160a01b03848116919091179182905560408051929091168252517f7dfb1d59db37a3fd2e15e796c189dcab714cdbb18650d68a1de58f8fa60718c9916020908290030190a1505b50565b60006200098a838362000a66565b620009c257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620006cb565b506000620006cb565b60008281526001840160205260408120548062000a32575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055620006ef565b8285600001600183038154811062000a4657fe5b9060005260206000209060020201600101819055506000915050620006ef565b60009081526001919091016020526040902054151590565b600a54600b54600c5460408051600080825260208201928390526001600160a01b039384166044830181815230606485018190528987166084860152608060a48601908152855160c48701819052998816996339255d5b999890981697635a5999e360e11b97949692958c9593949360e486019290918190849084905b8381101562000b1557818101518382015260200162000afb565b50505050905090810190601f16801562000b435780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b8381101562000bd757818101518382015260200162000bbd565b50505050905090810190601f16801562000c055780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801562000c4057600080fd5b505af115801562000c55573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562000c7f57600080fd5b810190808051604051939291908464010000000082111562000ca057600080fd5b90830190602082018581111562000cb657600080fd5b825164010000000081118282018810171562000cd157600080fd5b82525081516020918201929091019080838360005b8381101562000d0057818101518382015260200162000ce6565b50505050905090810190601f16801562000d2e5780820380516001836020036101000a031916815260200191505b506040525050505050565b600a54600b54600c54604080516000808252602082019092526001600160a01b03948516946339255d5b9481169363317e182f60e11b9391169188918891905060405160240180856001600160a01b03168152602001846001600160a01b0316815260200183600b0b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101562000de257818101518382015260200162000dc8565b50505050905090810190601f16801562000e105780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b8381101562000ea457818101518382015260200162000e8a565b50505050905090810190601f16801562000ed25780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801562000f0d57600080fd5b505af115801562000f22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562000f4c57600080fd5b810190808051604051939291908464010000000082111562000f6d57600080fd5b90830190602082018581111562000f8357600080fd5b825164010000000081118282018810171562000f9e57600080fd5b82525081516020918201929091019080838360005b8381101562000fcd57818101518382015260200162000fb3565b50505050905090810190601f16801562000ffb5780820380516001836020036101000a031916815260200191505b50604052505050505050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200103f57600085556200108a565b82601f106200105a57805160ff19168380011785556200108a565b828001600101855582156200108a579182015b828111156200108a5782518255916020019190600101906200106d565b50620010989291506200109c565b5090565b5b808211156200109857600081556001016200109d565b613e1280620010c36000396000f3fe608060405234801561001057600080fd5b506004361061016a5760003560e01c806301ffc9a71461016f57806302964ff1146101aa57806306fdde03146101ce578063081812fc1461024b578063095ea7b31461026857806318160ddd146102965780631b8db774146102b0578063230dbd29146102b857806323b872dd146103e657806328d2bf941461041c5780632f745c591461044d57806330d9c915146104795780633d384b3b1461055757806342842e0e146105765780634f6ccce7146105ac57806353c11f99146105c95780635f9e7d77146106f75780636352211e146107d55780636c0360eb146107f257806370a08231146107fa578063884d1f401461082057806395d89b41146108fe57806398583c60146109065780639a1ca0aa14610926578063a22cb4651461092e578063b88d4fde1461095c578063c87b56dd14610a20578063cbd4946214610a3d578063d86ed3e5146102b8578063e985e9c514610a45575b600080fd5b6101966004803603602081101561018557600080fd5b50356001600160e01b031916610a73565b604080519115158252519081900360200190f35b6101b2610a96565b604080516001600160a01b039092168252519081900360200190f35b6101d6610aa5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102105781810151838201526020016101f8565b50505050905090810190601f16801561023d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b26004803603602081101561026157600080fd5b5035610b3b565b6102946004803603604081101561027e57600080fd5b506001600160a01b038135169060200135610b9d565b005b61029e610c78565b60408051918252519081900360200190f35b61029e610c89565b6101d6600480360360c08110156102ce57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561030857600080fd5b82018360208201111561031a57600080fd5b803590602001918460018302840111600160201b8311171561033b57600080fd5b919390929091602081019035600160201b81111561035857600080fd5b82018360208201111561036a57600080fd5b803590602001918460018302840111600160201b8311171561038b57600080fd5b919390929091602081019035600160201b8111156103a857600080fd5b8201836020820111156103ba57600080fd5b803590602001918460018302840111600160201b831117156103db57600080fd5b509092509050610c8f565b610294600480360360608110156103fc57600080fd5b506001600160a01b03813581169160208101359091169060400135610e4a565b610424610ea1565b604080519384526001600160a01b039092166020840152600b0b82820152519081900360600190f35b61029e6004803603604081101561046357600080fd5b506001600160a01b038135169060200135610f67565b6101d6600480360360a081101561048f57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156104c957600080fd5b8201836020820111156104db57600080fd5b803590602001918460018302840111600160201b831117156104fc57600080fd5b919390929091602081019035600160201b81111561051957600080fd5b82018360208201111561052b57600080fd5b803590602001918460018302840111600160201b8311171561054c57600080fd5b509092509050610f92565b61055f610fcb565b60408051600b9290920b8252519081900360200190f35b6102946004803603606081101561058c57600080fd5b506001600160a01b03813581169160208101359091169060400135610fd4565b61029e600480360360208110156105c257600080fd5b5035610fef565b6101d6600480360360c08110156105df57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561061957600080fd5b82018360208201111561062b57600080fd5b803590602001918460018302840111600160201b8311171561064c57600080fd5b919390929091602081019035600160201b81111561066957600080fd5b82018360208201111561067b57600080fd5b803590602001918460018302840111600160201b8311171561069c57600080fd5b919390929091602081019035600160201b8111156106b957600080fd5b8201836020820111156106cb57600080fd5b803590602001918460018302840111600160201b831117156106ec57600080fd5b509092509050611005565b6101d6600480360360a081101561070d57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561074757600080fd5b82018360208201111561075957600080fd5b803590602001918460018302840111600160201b8311171561077a57600080fd5b919390929091602081019035600160201b81111561079757600080fd5b8201836020820111156107a957600080fd5b803590602001918460018302840111600160201b831117156107ca57600080fd5b50909250905061117e565b6101b2600480360360208110156107eb57600080fd5b50356111b7565b6101d66111df565b61029e6004803603602081101561081057600080fd5b50356001600160a01b0316611240565b6101d6600480360360a081101561083657600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561087057600080fd5b82018360208201111561088257600080fd5b803590602001918460018302840111600160201b831117156108a357600080fd5b919390929091602081019035600160201b8111156108c057600080fd5b8201836020820111156108d257600080fd5b803590602001918460018302840111600160201b831117156108f357600080fd5b5090925090506112a8565b6101d66112e1565b6102946004803603602081101561091c57600080fd5b5035600b0b611342565b61055f6116a9565b6102946004803603604081101561094457600080fd5b506001600160a01b03813516906020013515156116b9565b6102946004803603608081101561097257600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156109ac57600080fd5b8201836020820111156109be57600080fd5b803590602001918460018302840111600160201b831117156109df57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506117ba945050505050565b6101d660048036036020811015610a3657600080fd5b5035611818565b6101b2611a99565b61019660048036036040811015610a5b57600080fd5b506001600160a01b0381358116916020013516611aa8565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b600d546001600160a01b031681565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b820191906000526020600020905b815481529060010190602001808311610b1457829003601f168201915b5050505050905090565b6000610b4682611b0e565b610b815760405162461bcd60e51b815260040180806020018281038252602c815260200180613c89602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610ba8826111b7565b9050806001600160a01b0316836001600160a01b03161415610bfb5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d0d6021913960400191505060405180910390fd5b806001600160a01b0316610c0d611b1b565b6001600160a01b03161480610c2e5750610c2e81610c29611b1b565b611aa8565b610c695760405162461bcd60e51b8152600401808060200182810382526038815260200180613bba6038913960400191505060405180910390fd5b610c738383611b1f565b505050565b6000610c846002611b8d565b905090565b60105481565b60608989610c9c82611b98565b610ced576040805162461bcd60e51b815260206004820152601f60248201527f5265646972656374416c6c3a206e6f7420616363657074656420746f6b656e00604482015290519081900360640190fd5b610cf681611bac565b610d315760405162461bcd60e51b8152600401808060200182810382526021815260200180613aa26021913960400191505060405180910390fd5b600a546001600160a01b03163314610d7a5760405162461bcd60e51b8152600401808060200182810382526022815260200180613b286022913960400191505060405180910390fd5b6000808a8a6040811015610d8d57600080fd5b50604080516001600160a01b03833581168083526020948501359091169382018490528251909550929350600080516020613b9a833981519152929081900390910190a1600e546001600160a01b0383811691161415610dfa57610df18787611c3b565b94505050610e3b565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929750610e3b945050505050565b50509998505050505050505050565b610e5b610e55611b1b565b82611f3f565b610e965760405162461bcd60e51b8152600401808060200182810382526031815260200180613d5d6031913960400191505060405180910390fd5b610c73838383611fe3565b600d54600090819081906001600160a01b031615610f6257600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251919092169163e6a1e888916064808301926080929190829003018186803b158015610f1957600080fd5b505afa158015610f2d573d6000803e3d6000fd5b505050506040513d6080811015610f4357600080fd5b508051602090910151600d549194506001600160a01b03909116925090505b909192565b6001600160a01b0382166000908152600160205260408120610f89908361212f565b90505b92915050565b606060405162461bcd60e51b815260040180806020018281038252602f815260200180613d8e602f913960400191505060405180910390fd5b600f54600b0b81565b610c73838383604051806020016040528060008152506117ba565b600080610ffd60028461213b565b509392505050565b600a546060906001600160a01b031633146110515760405162461bcd60e51b8152600401808060200182810382526022815260200180613b286022913960400191505060405180910390fd5b61105a8a611b98565b158061106c575061106a89611bac565b155b156110b05782828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092935061117192505050565b600080888860408110156110c357600080fd5b50604080516001600160a01b03833581168083526020948501359091169382018490528251909550929350600080516020613b9a833981519152929081900390910190a1600e546001600160a01b0383811691161415611130576111278585611c3b565b92505050611171565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611171945050505050565b9998505050505050505050565b606060405162461bcd60e51b8152600401808060200182810382526033815260200180613af56033913960400191505060405180910390fd5b6000610f8c82604051806060016040528060298152602001613c1c6029913960029190612157565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b60006001600160a01b0382166112875760405162461bcd60e51b815260040180806020018281038252602a815260200180613bf2602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610f8c90611b8d565b606060405162461bcd60e51b815260040180806020018281038252602f815260200180613d2e602f913960400191505060405180910390fd5b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b600e54600b82810b600160a01b909204810b900b1415611361576116a6565b600f54600b90810b810b9082900b13156113bd576040805162461bcd60e51b81526020600482015260186024820152775f6d6178416c6c6f776564466c6f77206f766572666c6f7760401b604482015290519081900360640190fd5b6010544211156113cf576113cf612164565b600e8054600b83810b6001600160601b0316600160a01b026001600160a01b03928316179283905554600c5460408051631cd43d1160e31b8152918416600483015293831660248201523060448201529251600093919092169163e6a1e88891606480820192608092909190829003018186803b15801561144f57600080fd5b505afa158015611463573d6000803e3d6000fd5b505050506040513d608081101561147957600080fd5b5060200151600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d608081101561150e57600080fd5b5060200151600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b15801561157957600080fd5b505afa15801561158d573d6000803e3d6000fd5b505050506040513d60808110156115a357600080fd5b50602001519050600083600b84900b156115cc57600d546115cc906001600160a01b0316612391565b82600b0b6000146115ec57600e546115ec906001600160a01b0316612391565b600085600b0b131561166c57600e54600160a01b9004600b90810b810b9086900b131561162857600e54600160a01b9004600b0b850391508190035b600081600b0b131561164a57600d5461164a906001600160a01b03168261263b565b600082600b0b131561166c57600e5461166c906001600160a01b03168361263b565b60408051600b87810b825283810b602083015284900b818301529051600080516020613dbd8339815191529181900360600190a150505050505b50565b600e54600160a01b9004600b0b81565b6116c1611b1b565b6001600160a01b0316826001600160a01b03161415611723576040805162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015290519081900360640190fd5b8060056000611730611b1b565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611774611b1b565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b6117cb6117c5611b1b565b83611f3f565b6118065760405162461bcd60e51b8152600401808060200182810382526031815260200180613d5d6031913960400191505060405180910390fd5b611812848484846128f8565b50505050565b606061182382611b0e565b61185e5760405162461bcd60e51b815260040180806020018281038252602f815260200180613cde602f913960400191505060405180910390fd5b60008281526008602090815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156118f15780601f106118c6576101008083540402835291602001916118f1565b820191906000526020600020905b8154815290600101906020018083116118d457829003601f168201915b5050505050905060006119026111df565b905080516000141561191657509050610a91565b8151156119d75780826040516020018083805190602001908083835b602083106119515780518252601f199092019160209182019101611932565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106119995780518252601f19909201916020918201910161197a565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050610a91565b806119e18561294a565b6040516020018083805190602001908083835b60208310611a135780518252601f1990920191602091820191016119f4565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611a5b5780518252601f199092019160209182019101611a3c565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050919050565b600e546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000610f898383612a24565b6000611af884846001600160a01b038516612a6e565b90505b9392505050565b6000610f898383612b05565b6000610f8c600283611b02565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b54826111b7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610f8c82612b1d565b600c546001600160a01b0390811691161490565b60007fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3826001600160a01b0316637730599e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0857600080fd5b505afa158015611c1c573d6000803e3d6000fd5b505050506040513d6020811015611c3257600080fd5b50511492915050565b606082828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b03938416600482015291831660248301523060448301525197985092969116945063e6a1e888935060648083019350608092829003018186803b158015611cd357600080fd5b505afa158015611ce7573d6000803e3d6000fd5b505050506040513d6080811015611cfd57600080fd5b5060200151600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b158015611d6857600080fd5b505afa158015611d7c573d6000803e3d6000fd5b505050506040513d6080811015611d9257600080fd5b5060200151600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b158015611dfd57600080fd5b505afa158015611e11573d6000803e3d6000fd5b505050506040513d6080811015611e2757600080fd5b50602001519050600083600b84900b15611e5457600d54611e51906001600160a01b031687612b21565b95505b82600b0b600014611e7857600e54611e75906001600160a01b031687612b21565b95505b600085600b0b1315611f0057600e54600160a01b9004600b90810b810b9086900b1315611eb457600e54600160a01b9004600b0b850391508190035b600081600b0b1315611eda57600d54611ed7906001600160a01b03168288612eec565b95505b600082600b0b1315611f0057600e54611efd906001600160a01b03168388612eec565b95505b60408051600b87810b825283810b602083015284900b818301529051600080516020613dbd8339815191529181900360600190a1505050505092915050565b6000611f4a82611b0e565b611f855760405162461bcd60e51b815260040180806020018281038252602c815260200180613b6e602c913960400191505060405180910390fd5b6000611f90836111b7565b9050806001600160a01b0316846001600160a01b03161480611fcb5750836001600160a01b0316611fc084610b3b565b6001600160a01b0316145b80611fdb5750611fdb8185611aa8565b949350505050565b826001600160a01b0316611ff6826111b7565b6001600160a01b03161461203b5760405162461bcd60e51b8152600401808060200182810382526029815260200180613cb56029913960400191505060405180910390fd5b6001600160a01b0382166120805760405162461bcd60e51b8152600401808060200182810382526024815260200180613b4a6024913960400191505060405180910390fd5b61208b8383836132bc565b612096600082611b1f565b6001600160a01b03831660009081526001602052604090206120b890826132c5565b506001600160a01b03821660009081526001602052604090206120db9082611ad6565b506120e860028284611ae2565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610f8983836132d1565b600080808061214a8686613335565b9097909650945050505050565b6000611af88484846133b0565b600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152918316602483015230604483015251600093929092169163e6a1e88891606480820192608092909190829003018186803b1580156121c857600080fd5b505afa1580156121dc573d6000803e3d6000fd5b505050506040513d60808110156121f257600080fd5b5060200151600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d608081101561228757600080fd5b5060200151600b54600c54600e5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251939450600093919092169163e6a1e888916064808301926080929190829003018186803b1580156122f257600080fd5b505afa158015612306573d6000803e3d6000fd5b505050506040513d608081101561231c57600080fd5b5060200151905082600b83900b1561234357600d54612343906001600160a01b0316612391565b81600b0b60001461236357600e54612363906001600160a01b0316612391565b600084600b0b131561181257600081600b0b131561181257600e54611812906001600160a01b03168261263b565b600a54600b54600c5460408051600080825260208201928390526001600160a01b039384166044830181815230606485018190528987166084860152608060a48601908152855160c48701819052998816996339255d5b999890981697635a5999e360e11b97949692958c9593949360e486019290918190849084905b8381101561242657818101518382015260200161240e565b50505050905090810190601f1680156124535780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b838110156124e55781810151838201526020016124cd565b50505050905090810190601f1680156125125780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801561254c57600080fd5b505af1158015612560573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561258957600080fd5b8101908080516040519392919084600160201b8211156125a857600080fd5b9083019060208201858111156125bd57600080fd5b8251600160201b8111828201881017156125d657600080fd5b82525081516020918201929091019080838360005b838110156126035781810151838201526020016125eb565b50505050905090810190601f1680156126305780820380516001836020036101000a031916815260200191505b506040525050505050565b600a54600b54600c54604080516000808252602082019092526001600160a01b03948516946339255d5b9481169363317e182f60e11b9391169188918891905060405160240180856001600160a01b03168152602001846001600160a01b0316815260200183600b0b815260200180602001828103825283818151815260200191508051906020019080838360005b838110156126e25781810151838201526020016126ca565b50505050905090810190601f16801561270f5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199a8b16178152905160e08c901b90991689526001600160a01b038a1660048a01908152606060248b01908152835160648c01528351939a919950975060448101965060840194509250905080838360005b838110156127a1578181015183820152602001612789565b50505050905090810190601f1680156127ce5780820380516001836020036101000a031916815260200191505b508381038252600281526020018061060f60f31b815250602001945050505050600060405180830381600087803b15801561280857600080fd5b505af115801561281c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561284557600080fd5b8101908080516040519392919084600160201b82111561286457600080fd5b90830190602082018581111561287957600080fd5b8251600160201b81118282018810171561289257600080fd5b82525081516020918201929091019080838360005b838110156128bf5781810151838201526020016128a7565b50505050905090810190601f1680156128ec5780820380516001836020036101000a031916815260200191505b50604052505050505050565b612903848484611fe3565b61290f8484848461347a565b6118125760405162461bcd60e51b8152600401808060200182810382526032815260200180613ac36032913960400191505060405180910390fd5b60608161296f57506040805180820190915260018152600360fc1b6020820152610a91565b8160005b811561298757600101600a82049150612973565b6000816001600160401b038111801561299f57600080fd5b506040519080825280601f01601f1916602001820160405280156129ca576020820181803683370190505b50859350905060001982015b8315612a1b57600a840660300160f81b828280600190039350815181106129f957fe5b60200101906001600160f81b031916908160001a905350600a840493506129d6565b50949350505050565b6000612a308383612b05565b612a6657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f8c565b506000610f8c565b600082815260018401602052604081205480612ad3575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611afb565b82856000016001830381548110612ae657fe5b9060005260206000209060020201600101819055506000915050611afb565b60009081526001919091016020526040902054151590565b5490565b600a54600b54600c5460408051600080825260208201928390526001600160a01b039384166044830181815230606485018190528a87166084860152608060a48601908152855160c4870181905260609a891699634329d293991697635a5999e360e11b97959693958e95909490939260e4860192918190849084905b83811015612bb6578181015183820152602001612b9e565b50505050905090810190601f168015612be35780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015612c82578181015183820152602001612c6a565b50505050905090810190601f168015612caf5780820380516001836020036101000a031916815260200191505b508481038352600281526020018061060f60f31b815250602001848103825285818151815260200191508051906020019080838360005b83811015612cfe578181015183820152602001612ce6565b50505050905090810190601f168015612d2b5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015612d4e57600080fd5b505af1158015612d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612d8b57600080fd5b8101908080516040519392919084600160201b821115612daa57600080fd5b908301906020820185811115612dbf57600080fd5b8251600160201b811182820188101715612dd857600080fd5b82525081516020918201929091019080838360005b83811015612e05578181015183820152602001612ded565b50505050905090810190601f168015612e325780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b821115612e5457600080fd5b908301906020820185811115612e6957600080fd5b8251600160201b811182820188101715612e8257600080fd5b82525081516020918201929091019080838360005b83811015612eaf578181015183820152602001612e97565b50505050905090810190601f168015612edc5780820380516001836020036101000a031916815260200191505b5060405250929695505050505050565b600a54600b8054600c5460408051600080825260208201928390526001600160a01b03938416604483018181528b86166064850152968a900b6084840152608060a48401908152835160c48501819052606099871698634329d29398979097169663317e182f60e11b9693958e958e959194929360e4860192918190849084905b83811015612f85578181015183820152602001612f6d565b50505050905090810190601f168015612fb25780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050856040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018060200180602001848103845286818151815260200191508051906020019080838360005b83811015613051578181015183820152602001613039565b50505050905090810190601f16801561307e5780820380516001836020036101000a031916815260200191505b508481038352600281526020018061060f60f31b815250602001848103825285818151815260200191508051906020019080838360005b838110156130cd5781810151838201526020016130b5565b50505050905090810190601f1680156130fa5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561311d57600080fd5b505af1158015613131573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561315a57600080fd5b8101908080516040519392919084600160201b82111561317957600080fd5b90830190602082018581111561318e57600080fd5b8251600160201b8111828201881017156131a757600080fd5b82525081516020918201929091019080838360005b838110156131d45781810151838201526020016131bc565b50505050905090810190601f1680156132015780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b82111561322357600080fd5b90830190602082018581111561323857600080fd5b8251600160201b81118282018810171561325157600080fd5b82525081516020918201929091019080838360005b8381101561327e578181015183820152602001613266565b50505050905090810190601f1680156132ab5780820380516001836020036101000a031916815260200191505b506040525092979650505050505050565b610c73826135e2565b6000610f898383613828565b815460009082106133135760405162461bcd60e51b8152600401808060200182810382526022815260200180613a806022913960400191505060405180910390fd5b82600001828154811061332257fe5b9060005260206000200154905092915050565b8154600090819083106133795760405162461bcd60e51b8152600401808060200182810382526022815260200180613c676022913960400191505060405180910390fd5b600084600001848154811061338a57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000828152600184016020526040812054828161344b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134105781810151838201526020016133f8565b50505050905090810190601f16801561343d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061345e57fe5b9060005260206000209060020201600101549150509392505050565b600061348e846001600160a01b03166138ee565b61349a57506001611fdb565b60006135a8630a85bd0160e11b6134af611b1b565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156135165781810151838201526020016134fe565b50505050905090810190601f1680156135435780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613ac3603291396001600160a01b03881691906138f4565b905060008180602001905160208110156135c157600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b6001600160a01b03811661363c576040805162461bcd60e51b815260206004820152601c60248201527b4e6577207265636569766572206973207a65726f206164647265737360201b604482015290519081900360640190fd5b600a5460408051631e51d6a760e11b81526001600160a01b03848116600483015291519190921691633ca3ad4e916024808301926020929190829003018186803b15801561368957600080fd5b505afa15801561369d573d6000803e3d6000fd5b505050506040513d60208110156136b357600080fd5b5051156136f15760405162461bcd60e51b8152600401808060200182810382526022815260200180613c456022913960400191505060405180910390fd5b600d546001600160a01b038281169116141561370c576116a6565b600b54600c54600d5460408051631cd43d1160e31b81526001600160a01b039384166004820152306024820152918316604483015251600093929092169163e6a1e88891606480820192608092909190829003018186803b15801561377057600080fd5b505afa158015613784573d6000803e3d6000fd5b505050506040513d608081101561379a57600080fd5b506020015190506000600b82900b13156137cd57600d546137c3906001600160a01b0316612391565b6137cd828261263b565b600d80546001600160a01b0319166001600160a01b03848116919091179182905560408051929091168252517f7dfb1d59db37a3fd2e15e796c189dcab714cdbb18650d68a1de58f8fa60718c9916020908290030190a15050565b600081815260018301602052604081205480156138e4578354600019808301919081019060009087908390811061385b57fe5b906000526020600020015490508087600001848154811061387857fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806138a857fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610f8c565b6000915050610f8c565b3b151590565b6060611af8848460008585613908856138ee565b613959576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106139975780518252601f199092019160209182019101613978565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146139f9576040519150601f19603f3d011682016040523d82523d6000602084013e6139fe565b606091505b5091509150613a0e828286613a19565b979650505050505050565b60608315613a28575081611afb565b825115613a385782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156134105781810151838201526020016133f856fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64735265646972656374416c6c3a206f6e6c7920434641763120737570706f727465644552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572556e737570706f727465642063616c6c6261636b202d20204265666f72652041677265656d656e74205465726d696e617465645265646972656374416c6c3a20737570706f7274206f6e6c79206f6e6520686f73744552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656ec87e7a7e3edb09ee472572453ff451b078bc87d41904d6fceb24066a3646207e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4e65772072656365697665722063616e206e6f742062652061207375706572417070456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572556e737570706f727465642063616c6c6261636b202d204265666f72652041677265656d656e7420757064617465644552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564556e737570706f727465642063616c6c6261636b202d204265666f72652041677265656d656e7420437265617465648e4da29935c23d4473a2096cf03e1be0d236a6888042afd7c80746ff99666b72a2646970667358221220c36aacbcc1ae6c9b25af483b4067c74e044154a55eca5a20ed6afa48f6cc7fa464736f6c634300070600334e65772072656365697665722063616e206e6f742062652061207375706572417070456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b652146fb0650aa23d903841a16cbfadac001411640a1961091ac4ff13f0f16bcce416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220f5821697249a35211938e1fcf95b9fb67b45f66b711da64f0facfc3055dc128b64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 6684,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "_host",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6686,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "_cfa",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6688,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "_acceptedToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6690,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "_paymentFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6707,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "cashflowsRecipient",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6711,
        "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
        "label": "cashflowsSender",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)3233_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3232,
            "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2968_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3233_storage"
          },
          {
            "astId": 17,
            "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2968_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2963,
            "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2967,
            "contract": "Contracts/Cashflow/TradeableCashflowWithAllowanceFactory.sol:TradeableCashflowWithAllowanceFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}